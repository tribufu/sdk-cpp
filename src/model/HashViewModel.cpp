/**
 * Tribufu API
 * REST API to access Tribufu services.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: contact@tribufu.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.14.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "tribufu++/model/HashViewModel.h"

namespace tribufu
{
    namespace models
    {

        HashViewModel::HashViewModel()
        {
            m_Value = utility::conversions::to_string_t("");
            m_ValueIsSet = false;
        }

        HashViewModel::~HashViewModel()
        {
        }

        void HashViewModel::validate()
        {
            // TODO: implement validation
        }

        web::json::value HashViewModel::toJson() const
        {
            web::json::value val = web::json::value::object();
            if (m_ValueIsSet)
            {

                val[utility::conversions::to_string_t(_XPLATSTR("value"))] = ModelBase::toJson(m_Value);
            }

            return val;
        }

        bool HashViewModel::fromJson(const web::json::value &val)
        {
            bool ok = true;
            if (val.has_field(utility::conversions::to_string_t(_XPLATSTR("value"))))
            {
                const web::json::value &fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("value")));
                if (!fieldValue.is_null())
                {
                    utility::string_t refVal_setValue;
                    ok &= ModelBase::fromJson(fieldValue, refVal_setValue);
                    setValue(refVal_setValue);
                }
            }
            return ok;
        }

        void HashViewModel::toMultipart(std::shared_ptr<MultipartFormData> multipart,
                                        const utility::string_t &prefix) const
        {
            utility::string_t namePrefix = prefix;
            if (namePrefix.size() > 0 &&
                namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
            {
                namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
            }
            if (m_ValueIsSet)
            {
                multipart->add(ModelBase::toHttpContent(
                    namePrefix + utility::conversions::to_string_t(_XPLATSTR("value")), m_Value));
            }
        }

        bool HashViewModel::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t &prefix)
        {
            bool ok = true;
            utility::string_t namePrefix = prefix;
            if (namePrefix.size() > 0 &&
                namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
            {
                namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
            }

            if (multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("value"))))
            {
                utility::string_t refVal_setValue;
                ok &= ModelBase::fromHttpContent(
                    multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("value"))), refVal_setValue);
                setValue(refVal_setValue);
            }
            return ok;
        }

        utility::string_t HashViewModel::getValue() const
        {
            return m_Value;
        }

        void HashViewModel::setValue(const utility::string_t &value)
        {
            m_Value = value;
            m_ValueIsSet = true;
        }

        bool HashViewModel::valueIsSet() const
        {
            return m_ValueIsSet;
        }

        void HashViewModel::unsetValue()
        {
            m_ValueIsSet = false;
        }

    }
}
