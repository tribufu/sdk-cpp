/**
 * Tribufu API
 * REST API to access Tribufu services.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: contact@tribufu.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.12.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "tribufu++/model/IpAddress.h"

namespace tribufu {
namespace models {

IpAddress::IpAddress()
{
    m_Address = utility::conversions::to_string_t("");
    m_AddressIsSet = false;
    m_Version = 0;
    m_VersionIsSet = false;
    m_Network = utility::conversions::to_string_t("");
    m_NetworkIsSet = false;
    m_Reserved = false;
    m_ReservedIsSet = false;
    m_Asn = utility::conversions::to_string_t("");
    m_AsnIsSet = false;
    m_Isp = utility::conversions::to_string_t("");
    m_IspIsSet = false;
    m_Continent = utility::conversions::to_string_t("");
    m_ContinentIsSet = false;
    m_Country = utility::conversions::to_string_t("");
    m_CountryIsSet = false;
    m_Region = utility::conversions::to_string_t("");
    m_RegionIsSet = false;
    m_City = utility::conversions::to_string_t("");
    m_CityIsSet = false;
    m_Postal_code = utility::conversions::to_string_t("");
    m_Postal_codeIsSet = false;
    m_Calling_code = utility::conversions::to_string_t("");
    m_Calling_codeIsSet = false;
    m_Tld = utility::conversions::to_string_t("");
    m_TldIsSet = false;
    m_Language = utility::conversions::to_string_t("");
    m_LanguageIsSet = false;
    m_Timezone = utility::conversions::to_string_t("");
    m_TimezoneIsSet = false;
    m_Currency = utility::conversions::to_string_t("");
    m_CurrencyIsSet = false;
    m_Latitude = 0.0f;
    m_LatitudeIsSet = false;
    m_Longitude = 0.0f;
    m_LongitudeIsSet = false;
}

IpAddress::~IpAddress()
{
}

void IpAddress::validate()
{
    // TODO: implement validation
}

web::json::value IpAddress::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_AddressIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("address"))] = ModelBase::toJson(m_Address);
    }
    if(m_VersionIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("version"))] = ModelBase::toJson(m_Version);
    }
    if(m_NetworkIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("network"))] = ModelBase::toJson(m_Network);
    }
    if(m_ReservedIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("reserved"))] = ModelBase::toJson(m_Reserved);
    }
    if(m_AsnIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("asn"))] = ModelBase::toJson(m_Asn);
    }
    if(m_IspIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("isp"))] = ModelBase::toJson(m_Isp);
    }
    if(m_ContinentIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("continent"))] = ModelBase::toJson(m_Continent);
    }
    if(m_CountryIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("country"))] = ModelBase::toJson(m_Country);
    }
    if(m_RegionIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("region"))] = ModelBase::toJson(m_Region);
    }
    if(m_CityIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("city"))] = ModelBase::toJson(m_City);
    }
    if(m_Postal_codeIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("postal_code"))] = ModelBase::toJson(m_Postal_code);
    }
    if(m_Calling_codeIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("calling_code"))] = ModelBase::toJson(m_Calling_code);
    }
    if(m_TldIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("tld"))] = ModelBase::toJson(m_Tld);
    }
    if(m_LanguageIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("language"))] = ModelBase::toJson(m_Language);
    }
    if(m_TimezoneIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("timezone"))] = ModelBase::toJson(m_Timezone);
    }
    if(m_CurrencyIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("currency"))] = ModelBase::toJson(m_Currency);
    }
    if(m_LatitudeIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("latitude"))] = ModelBase::toJson(m_Latitude);
    }
    if(m_LongitudeIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("longitude"))] = ModelBase::toJson(m_Longitude);
    }

    return val;
}

bool IpAddress::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(U("address"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("address")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAddress;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAddress);
            setAddress(refVal_setAddress);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("version"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("version")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setVersion;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVersion);
            setVersion(refVal_setVersion);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("network"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("network")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setNetwork;
            ok &= ModelBase::fromJson(fieldValue, refVal_setNetwork);
            setNetwork(refVal_setNetwork);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("reserved"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("reserved")));
        if(!fieldValue.is_null())
        {
            bool refVal_setReserved;
            ok &= ModelBase::fromJson(fieldValue, refVal_setReserved);
            setReserved(refVal_setReserved);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("asn"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("asn")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAsn;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAsn);
            setAsn(refVal_setAsn);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("isp"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("isp")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setIsp;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsp);
            setIsp(refVal_setIsp);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("continent"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("continent")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setContinent;
            ok &= ModelBase::fromJson(fieldValue, refVal_setContinent);
            setContinent(refVal_setContinent);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("country"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("country")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCountry;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCountry);
            setCountry(refVal_setCountry);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("region"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("region")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setRegion;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRegion);
            setRegion(refVal_setRegion);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("city"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("city")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCity;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCity);
            setCity(refVal_setCity);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("postal_code"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("postal_code")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPostalCode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPostalCode);
            setPostalCode(refVal_setPostalCode);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("calling_code"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("calling_code")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCallingCode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCallingCode);
            setCallingCode(refVal_setCallingCode);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("tld"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tld")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTld;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTld);
            setTld(refVal_setTld);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("language"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("language")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLanguage;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLanguage);
            setLanguage(refVal_setLanguage);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("timezone"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("timezone")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTimezone;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTimezone);
            setTimezone(refVal_setTimezone);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("currency"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("currency")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCurrency;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCurrency);
            setCurrency(refVal_setCurrency);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("latitude"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("latitude")));
        if(!fieldValue.is_null())
        {
            float refVal_setLatitude;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLatitude);
            setLatitude(refVal_setLatitude);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("longitude"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("longitude")));
        if(!fieldValue.is_null())
        {
            float refVal_setLongitude;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLongitude);
            setLongitude(refVal_setLongitude);
            
        }
    }
    return ok;
}

void IpAddress::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_AddressIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("address")), m_Address));
    }
    if(m_VersionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("version")), m_Version));
    }
    if(m_NetworkIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("network")), m_Network));
    }
    if(m_ReservedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("reserved")), m_Reserved));
    }
    if(m_AsnIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("asn")), m_Asn));
    }
    if(m_IspIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("isp")), m_Isp));
    }
    if(m_ContinentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("continent")), m_Continent));
    }
    if(m_CountryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("country")), m_Country));
    }
    if(m_RegionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("region")), m_Region));
    }
    if(m_CityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("city")), m_City));
    }
    if(m_Postal_codeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("postal_code")), m_Postal_code));
    }
    if(m_Calling_codeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("calling_code")), m_Calling_code));
    }
    if(m_TldIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tld")), m_Tld));
    }
    if(m_LanguageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("language")), m_Language));
    }
    if(m_TimezoneIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("timezone")), m_Timezone));
    }
    if(m_CurrencyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("currency")), m_Currency));
    }
    if(m_LatitudeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("latitude")), m_Latitude));
    }
    if(m_LongitudeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("longitude")), m_Longitude));
    }
}

bool IpAddress::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("address"))))
    {
        utility::string_t refVal_setAddress;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("address"))), refVal_setAddress );
        setAddress(refVal_setAddress);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("version"))))
    {
        int32_t refVal_setVersion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("version"))), refVal_setVersion );
        setVersion(refVal_setVersion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("network"))))
    {
        utility::string_t refVal_setNetwork;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("network"))), refVal_setNetwork );
        setNetwork(refVal_setNetwork);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("reserved"))))
    {
        bool refVal_setReserved;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("reserved"))), refVal_setReserved );
        setReserved(refVal_setReserved);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("asn"))))
    {
        utility::string_t refVal_setAsn;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("asn"))), refVal_setAsn );
        setAsn(refVal_setAsn);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("isp"))))
    {
        utility::string_t refVal_setIsp;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("isp"))), refVal_setIsp );
        setIsp(refVal_setIsp);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("continent"))))
    {
        utility::string_t refVal_setContinent;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("continent"))), refVal_setContinent );
        setContinent(refVal_setContinent);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("country"))))
    {
        utility::string_t refVal_setCountry;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("country"))), refVal_setCountry );
        setCountry(refVal_setCountry);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("region"))))
    {
        utility::string_t refVal_setRegion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("region"))), refVal_setRegion );
        setRegion(refVal_setRegion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("city"))))
    {
        utility::string_t refVal_setCity;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("city"))), refVal_setCity );
        setCity(refVal_setCity);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("postal_code"))))
    {
        utility::string_t refVal_setPostalCode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("postal_code"))), refVal_setPostalCode );
        setPostalCode(refVal_setPostalCode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("calling_code"))))
    {
        utility::string_t refVal_setCallingCode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("calling_code"))), refVal_setCallingCode );
        setCallingCode(refVal_setCallingCode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("tld"))))
    {
        utility::string_t refVal_setTld;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tld"))), refVal_setTld );
        setTld(refVal_setTld);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("language"))))
    {
        utility::string_t refVal_setLanguage;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("language"))), refVal_setLanguage );
        setLanguage(refVal_setLanguage);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("timezone"))))
    {
        utility::string_t refVal_setTimezone;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("timezone"))), refVal_setTimezone );
        setTimezone(refVal_setTimezone);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("currency"))))
    {
        utility::string_t refVal_setCurrency;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("currency"))), refVal_setCurrency );
        setCurrency(refVal_setCurrency);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("latitude"))))
    {
        float refVal_setLatitude;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("latitude"))), refVal_setLatitude );
        setLatitude(refVal_setLatitude);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("longitude"))))
    {
        float refVal_setLongitude;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("longitude"))), refVal_setLongitude );
        setLongitude(refVal_setLongitude);
    }
    return ok;
}


utility::string_t IpAddress::getAddress() const
{
    return m_Address;
}


void IpAddress::setAddress(const utility::string_t& value)
{
    m_Address = value;
    m_AddressIsSet = true;
}

bool IpAddress::addressIsSet() const
{
    return m_AddressIsSet;
}

void IpAddress::unsetAddress()
{
    m_AddressIsSet = false;
}
int32_t IpAddress::getVersion() const
{
    return m_Version;
}

void IpAddress::setVersion(int32_t value)
{
    m_Version = value;
    m_VersionIsSet = true;
}

bool IpAddress::versionIsSet() const
{
    return m_VersionIsSet;
}

void IpAddress::unsetVersion()
{
    m_VersionIsSet = false;
}
utility::string_t IpAddress::getNetwork() const
{
    return m_Network;
}


void IpAddress::setNetwork(const utility::string_t& value)
{
    m_Network = value;
    m_NetworkIsSet = true;
}

bool IpAddress::networkIsSet() const
{
    return m_NetworkIsSet;
}

void IpAddress::unsetNetwork()
{
    m_NetworkIsSet = false;
}
bool IpAddress::isReserved() const
{
    return m_Reserved;
}

void IpAddress::setReserved(bool value)
{
    m_Reserved = value;
    m_ReservedIsSet = true;
}

bool IpAddress::reservedIsSet() const
{
    return m_ReservedIsSet;
}

void IpAddress::unsetReserved()
{
    m_ReservedIsSet = false;
}
utility::string_t IpAddress::getAsn() const
{
    return m_Asn;
}


void IpAddress::setAsn(const utility::string_t& value)
{
    m_Asn = value;
    m_AsnIsSet = true;
}

bool IpAddress::asnIsSet() const
{
    return m_AsnIsSet;
}

void IpAddress::unsetAsn()
{
    m_AsnIsSet = false;
}
utility::string_t IpAddress::getIsp() const
{
    return m_Isp;
}


void IpAddress::setIsp(const utility::string_t& value)
{
    m_Isp = value;
    m_IspIsSet = true;
}

bool IpAddress::ispIsSet() const
{
    return m_IspIsSet;
}

void IpAddress::unsetIsp()
{
    m_IspIsSet = false;
}
utility::string_t IpAddress::getContinent() const
{
    return m_Continent;
}


void IpAddress::setContinent(const utility::string_t& value)
{
    m_Continent = value;
    m_ContinentIsSet = true;
}

bool IpAddress::continentIsSet() const
{
    return m_ContinentIsSet;
}

void IpAddress::unsetContinent()
{
    m_ContinentIsSet = false;
}
utility::string_t IpAddress::getCountry() const
{
    return m_Country;
}


void IpAddress::setCountry(const utility::string_t& value)
{
    m_Country = value;
    m_CountryIsSet = true;
}

bool IpAddress::countryIsSet() const
{
    return m_CountryIsSet;
}

void IpAddress::unsetCountry()
{
    m_CountryIsSet = false;
}
utility::string_t IpAddress::getRegion() const
{
    return m_Region;
}


void IpAddress::setRegion(const utility::string_t& value)
{
    m_Region = value;
    m_RegionIsSet = true;
}

bool IpAddress::regionIsSet() const
{
    return m_RegionIsSet;
}

void IpAddress::unsetRegion()
{
    m_RegionIsSet = false;
}
utility::string_t IpAddress::getCity() const
{
    return m_City;
}


void IpAddress::setCity(const utility::string_t& value)
{
    m_City = value;
    m_CityIsSet = true;
}

bool IpAddress::cityIsSet() const
{
    return m_CityIsSet;
}

void IpAddress::unsetCity()
{
    m_CityIsSet = false;
}
utility::string_t IpAddress::getPostalCode() const
{
    return m_Postal_code;
}


void IpAddress::setPostalCode(const utility::string_t& value)
{
    m_Postal_code = value;
    m_Postal_codeIsSet = true;
}

bool IpAddress::postalCodeIsSet() const
{
    return m_Postal_codeIsSet;
}

void IpAddress::unsetPostal_code()
{
    m_Postal_codeIsSet = false;
}
utility::string_t IpAddress::getCallingCode() const
{
    return m_Calling_code;
}


void IpAddress::setCallingCode(const utility::string_t& value)
{
    m_Calling_code = value;
    m_Calling_codeIsSet = true;
}

bool IpAddress::callingCodeIsSet() const
{
    return m_Calling_codeIsSet;
}

void IpAddress::unsetCalling_code()
{
    m_Calling_codeIsSet = false;
}
utility::string_t IpAddress::getTld() const
{
    return m_Tld;
}


void IpAddress::setTld(const utility::string_t& value)
{
    m_Tld = value;
    m_TldIsSet = true;
}

bool IpAddress::tldIsSet() const
{
    return m_TldIsSet;
}

void IpAddress::unsetTld()
{
    m_TldIsSet = false;
}
utility::string_t IpAddress::getLanguage() const
{
    return m_Language;
}


void IpAddress::setLanguage(const utility::string_t& value)
{
    m_Language = value;
    m_LanguageIsSet = true;
}

bool IpAddress::languageIsSet() const
{
    return m_LanguageIsSet;
}

void IpAddress::unsetLanguage()
{
    m_LanguageIsSet = false;
}
utility::string_t IpAddress::getTimezone() const
{
    return m_Timezone;
}


void IpAddress::setTimezone(const utility::string_t& value)
{
    m_Timezone = value;
    m_TimezoneIsSet = true;
}

bool IpAddress::timezoneIsSet() const
{
    return m_TimezoneIsSet;
}

void IpAddress::unsetTimezone()
{
    m_TimezoneIsSet = false;
}
utility::string_t IpAddress::getCurrency() const
{
    return m_Currency;
}


void IpAddress::setCurrency(const utility::string_t& value)
{
    m_Currency = value;
    m_CurrencyIsSet = true;
}

bool IpAddress::currencyIsSet() const
{
    return m_CurrencyIsSet;
}

void IpAddress::unsetCurrency()
{
    m_CurrencyIsSet = false;
}
float IpAddress::getLatitude() const
{
    return m_Latitude;
}

void IpAddress::setLatitude(float value)
{
    m_Latitude = value;
    m_LatitudeIsSet = true;
}

bool IpAddress::latitudeIsSet() const
{
    return m_LatitudeIsSet;
}

void IpAddress::unsetLatitude()
{
    m_LatitudeIsSet = false;
}
float IpAddress::getLongitude() const
{
    return m_Longitude;
}

void IpAddress::setLongitude(float value)
{
    m_Longitude = value;
    m_LongitudeIsSet = true;
}

bool IpAddress::longitudeIsSet() const
{
    return m_LongitudeIsSet;
}

void IpAddress::unsetLongitude()
{
    m_LongitudeIsSet = false;
}

}
}


