/**
 * Tribufu API
 * REST API to access Tribufu services.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: contact@tribufu.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.14.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "tribufu++/model/LoginProvider.h"

namespace tribufu
{
    namespace models
    {

        namespace
        {
            using EnumUnderlyingType = utility::string_t;

            LoginProvider::eLoginProvider toEnum(const EnumUnderlyingType &val)
            {
                if (val == utility::conversions::to_string_t(_XPLATSTR("steam")))
                    return LoginProvider::eLoginProvider::LoginProvider_STEAM;
                if (val == utility::conversions::to_string_t(_XPLATSTR("epic")))
                    return LoginProvider::eLoginProvider::LoginProvider_EPIC;
                if (val == utility::conversions::to_string_t(_XPLATSTR("discord")))
                    return LoginProvider::eLoginProvider::LoginProvider_DISCORD;
                if (val == utility::conversions::to_string_t(_XPLATSTR("microsoft")))
                    return LoginProvider::eLoginProvider::LoginProvider_MICROSOFT;
                if (val == utility::conversions::to_string_t(_XPLATSTR("playstation")))
                    return LoginProvider::eLoginProvider::LoginProvider_PLAYSTATION;
                if (val == utility::conversions::to_string_t(_XPLATSTR("google")))
                    return LoginProvider::eLoginProvider::LoginProvider_GOOGLE;
                if (val == utility::conversions::to_string_t(_XPLATSTR("apple")))
                    return LoginProvider::eLoginProvider::LoginProvider_APPLE;
                return {};
            }

            EnumUnderlyingType fromEnum(LoginProvider::eLoginProvider e)
            {
                switch (e)
                {
                case LoginProvider::eLoginProvider::LoginProvider_STEAM:
                    return _XPLATSTR("steam");
                case LoginProvider::eLoginProvider::LoginProvider_EPIC:
                    return _XPLATSTR("epic");
                case LoginProvider::eLoginProvider::LoginProvider_DISCORD:
                    return _XPLATSTR("discord");
                case LoginProvider::eLoginProvider::LoginProvider_MICROSOFT:
                    return _XPLATSTR("microsoft");
                case LoginProvider::eLoginProvider::LoginProvider_PLAYSTATION:
                    return _XPLATSTR("playstation");
                case LoginProvider::eLoginProvider::LoginProvider_GOOGLE:
                    return _XPLATSTR("google");
                case LoginProvider::eLoginProvider::LoginProvider_APPLE:
                    return _XPLATSTR("apple");
                default:
                    break;
                }
                return {};
            }
        }

        LoginProvider::LoginProvider()
        {
        }

        LoginProvider::~LoginProvider()
        {
        }

        void LoginProvider::validate()
        {
            // TODO: implement validation
        }

        web::json::value LoginProvider::toJson() const
        {
            auto val = fromEnum(m_value);
            return web::json::value(val);
        }

        bool LoginProvider::fromJson(const web::json::value &val)
        {
            m_value = toEnum(val.as_string());
            return true;
        }

        void LoginProvider::toMultipart(std::shared_ptr<MultipartFormData> multipart,
                                        const utility::string_t &prefix) const
        {
            utility::string_t namePrefix = prefix;
            if (!namePrefix.empty() && namePrefix.back() != _XPLATSTR('.'))
            {
                namePrefix.push_back(_XPLATSTR('.'));
            }

            auto e = fromEnum(m_value);
            multipart->add(ModelBase::toHttpContent(namePrefix, e));
        }

        bool LoginProvider::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t &prefix)
        {
            bool ok = true;
            utility::string_t namePrefix = prefix;
            if (!namePrefix.empty() && namePrefix.back() != _XPLATSTR('.'))
            {
                namePrefix.push_back(_XPLATSTR('.'));
            }
            {
                EnumUnderlyingType e;
                ok = ModelBase::fromHttpContent(multipart->getContent(namePrefix), e);
                if (ok)
                {
                    auto v = toEnum(e);
                    setValue(v);
                }
            }
            return ok;
        }

        LoginProvider::eLoginProvider LoginProvider::getValue() const
        {
            return m_value;
        }

        void LoginProvider::setValue(LoginProvider::eLoginProvider const value)
        {
            m_value = value;
        }

        LoginProvider::LoginProvider(utility::string_t str)
        {
            setValue(strToEnumMap[str]);
        }

    }
}
