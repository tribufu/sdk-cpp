/**
 * Tribufu API
 * REST API to access Tribufu services.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: contact@tribufu.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.12.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "tribufu++/model/AuthorizeRequest.h"

namespace tribufu {
namespace models {

AuthorizeRequest::AuthorizeRequest()
{
    m_Response_typeIsSet = false;
    m_Client_id = utility::conversions::to_string_t("");
    m_Client_idIsSet = false;
    m_Code_challenge = utility::conversions::to_string_t("");
    m_Code_challengeIsSet = false;
    m_Code_challenge_methodIsSet = false;
    m_Redirect_uri = utility::conversions::to_string_t("");
    m_Redirect_uriIsSet = false;
    m_Scope = utility::conversions::to_string_t("");
    m_ScopeIsSet = false;
    m_State = utility::conversions::to_string_t("");
    m_StateIsSet = false;
}

AuthorizeRequest::~AuthorizeRequest()
{
}

void AuthorizeRequest::validate()
{
    // TODO: implement validation
}

web::json::value AuthorizeRequest::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_Response_typeIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("response_type"))] = ModelBase::toJson(m_Response_type);
    }
    if(m_Client_idIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("client_id"))] = ModelBase::toJson(m_Client_id);
    }
    if(m_Code_challengeIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("code_challenge"))] = ModelBase::toJson(m_Code_challenge);
    }
    if(m_Code_challenge_methodIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("code_challenge_method"))] = ModelBase::toJson(m_Code_challenge_method);
    }
    if(m_Redirect_uriIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("redirect_uri"))] = ModelBase::toJson(m_Redirect_uri);
    }
    if(m_ScopeIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("scope"))] = ModelBase::toJson(m_Scope);
    }
    if(m_StateIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("state"))] = ModelBase::toJson(m_State);
    }

    return val;
}

bool AuthorizeRequest::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(U("response_type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("response_type")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ResponseType> refVal_setResponseType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setResponseType);
            setResponseType(refVal_setResponseType);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("client_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("client_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setClientId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setClientId);
            setClientId(refVal_setClientId);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("code_challenge"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("code_challenge")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCodeChallenge;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCodeChallenge);
            setCodeChallenge(refVal_setCodeChallenge);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("code_challenge_method"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("code_challenge_method")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CodeChallengeMethod> refVal_setCodeChallengeMethod;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCodeChallengeMethod);
            setCodeChallengeMethod(refVal_setCodeChallengeMethod);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("redirect_uri"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("redirect_uri")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setRedirectUri;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRedirectUri);
            setRedirectUri(refVal_setRedirectUri);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("scope"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("scope")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setScope;
            ok &= ModelBase::fromJson(fieldValue, refVal_setScope);
            setScope(refVal_setScope);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("state"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("state")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setState;
            ok &= ModelBase::fromJson(fieldValue, refVal_setState);
            setState(refVal_setState);
            
        }
    }
    return ok;
}

void AuthorizeRequest::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Response_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("response_type")), m_Response_type));
    }
    if(m_Client_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("client_id")), m_Client_id));
    }
    if(m_Code_challengeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("code_challenge")), m_Code_challenge));
    }
    if(m_Code_challenge_methodIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("code_challenge_method")), m_Code_challenge_method));
    }
    if(m_Redirect_uriIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("redirect_uri")), m_Redirect_uri));
    }
    if(m_ScopeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("scope")), m_Scope));
    }
    if(m_StateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("state")), m_State));
    }
}

bool AuthorizeRequest::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("response_type"))))
    {
        std::shared_ptr<ResponseType> refVal_setResponseType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("response_type"))), refVal_setResponseType );
        setResponseType(refVal_setResponseType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("client_id"))))
    {
        utility::string_t refVal_setClientId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("client_id"))), refVal_setClientId );
        setClientId(refVal_setClientId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("code_challenge"))))
    {
        utility::string_t refVal_setCodeChallenge;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("code_challenge"))), refVal_setCodeChallenge );
        setCodeChallenge(refVal_setCodeChallenge);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("code_challenge_method"))))
    {
        std::shared_ptr<CodeChallengeMethod> refVal_setCodeChallengeMethod;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("code_challenge_method"))), refVal_setCodeChallengeMethod );
        setCodeChallengeMethod(refVal_setCodeChallengeMethod);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("redirect_uri"))))
    {
        utility::string_t refVal_setRedirectUri;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("redirect_uri"))), refVal_setRedirectUri );
        setRedirectUri(refVal_setRedirectUri);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("scope"))))
    {
        utility::string_t refVal_setScope;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("scope"))), refVal_setScope );
        setScope(refVal_setScope);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("state"))))
    {
        utility::string_t refVal_setState;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("state"))), refVal_setState );
        setState(refVal_setState);
    }
    return ok;
}


std::shared_ptr<ResponseType> AuthorizeRequest::getResponseType() const
{
    return m_Response_type;
}


void AuthorizeRequest::setResponseType(const std::shared_ptr<ResponseType>& value)
{
    m_Response_type = value;
    m_Response_typeIsSet = true;
}

bool AuthorizeRequest::responseTypeIsSet() const
{
    return m_Response_typeIsSet;
}

void AuthorizeRequest::unsetResponse_type()
{
    m_Response_typeIsSet = false;
}
utility::string_t AuthorizeRequest::getClientId() const
{
    return m_Client_id;
}


void AuthorizeRequest::setClientId(const utility::string_t& value)
{
    m_Client_id = value;
    m_Client_idIsSet = true;
}

bool AuthorizeRequest::clientIdIsSet() const
{
    return m_Client_idIsSet;
}

void AuthorizeRequest::unsetClient_id()
{
    m_Client_idIsSet = false;
}
utility::string_t AuthorizeRequest::getCodeChallenge() const
{
    return m_Code_challenge;
}


void AuthorizeRequest::setCodeChallenge(const utility::string_t& value)
{
    m_Code_challenge = value;
    m_Code_challengeIsSet = true;
}

bool AuthorizeRequest::codeChallengeIsSet() const
{
    return m_Code_challengeIsSet;
}

void AuthorizeRequest::unsetCode_challenge()
{
    m_Code_challengeIsSet = false;
}
std::shared_ptr<CodeChallengeMethod> AuthorizeRequest::getCodeChallengeMethod() const
{
    return m_Code_challenge_method;
}


void AuthorizeRequest::setCodeChallengeMethod(const std::shared_ptr<CodeChallengeMethod>& value)
{
    m_Code_challenge_method = value;
    m_Code_challenge_methodIsSet = true;
}

bool AuthorizeRequest::codeChallengeMethodIsSet() const
{
    return m_Code_challenge_methodIsSet;
}

void AuthorizeRequest::unsetCode_challenge_method()
{
    m_Code_challenge_methodIsSet = false;
}
utility::string_t AuthorizeRequest::getRedirectUri() const
{
    return m_Redirect_uri;
}


void AuthorizeRequest::setRedirectUri(const utility::string_t& value)
{
    m_Redirect_uri = value;
    m_Redirect_uriIsSet = true;
}

bool AuthorizeRequest::redirectUriIsSet() const
{
    return m_Redirect_uriIsSet;
}

void AuthorizeRequest::unsetRedirect_uri()
{
    m_Redirect_uriIsSet = false;
}
utility::string_t AuthorizeRequest::getScope() const
{
    return m_Scope;
}


void AuthorizeRequest::setScope(const utility::string_t& value)
{
    m_Scope = value;
    m_ScopeIsSet = true;
}

bool AuthorizeRequest::scopeIsSet() const
{
    return m_ScopeIsSet;
}

void AuthorizeRequest::unsetScope()
{
    m_ScopeIsSet = false;
}
utility::string_t AuthorizeRequest::getState() const
{
    return m_State;
}


void AuthorizeRequest::setState(const utility::string_t& value)
{
    m_State = value;
    m_StateIsSet = true;
}

bool AuthorizeRequest::stateIsSet() const
{
    return m_StateIsSet;
}

void AuthorizeRequest::unsetState()
{
    m_StateIsSet = false;
}

}
}


