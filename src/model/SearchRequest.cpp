/**
 * Tribufu API
 * REST API to access Tribufu services.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: contact@tribufu.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.14.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "tribufu++/model/SearchRequest.h"

namespace tribufu
{
    namespace models
    {

        SearchRequest::SearchRequest()
        {
            m_TypeIsSet = false;
            m_Query = utility::conversions::to_string_t("");
            m_QueryIsSet = false;
            m_Page = 0;
            m_PageIsSet = false;
            m_Game_id = utility::conversions::to_string_t("");
            m_Game_idIsSet = false;
        }

        SearchRequest::~SearchRequest()
        {
        }

        void SearchRequest::validate()
        {
            // TODO: implement validation
        }

        web::json::value SearchRequest::toJson() const
        {
            web::json::value val = web::json::value::object();
            if (m_TypeIsSet)
            {

                val[utility::conversions::to_string_t(_XPLATSTR("type"))] = ModelBase::toJson(m_Type);
            }
            if (m_QueryIsSet)
            {

                val[utility::conversions::to_string_t(_XPLATSTR("query"))] = ModelBase::toJson(m_Query);
            }
            if (m_PageIsSet)
            {

                val[utility::conversions::to_string_t(_XPLATSTR("page"))] = ModelBase::toJson(m_Page);
            }
            if (m_Game_idIsSet)
            {

                val[utility::conversions::to_string_t(_XPLATSTR("game_id"))] = ModelBase::toJson(m_Game_id);
            }

            return val;
        }

        bool SearchRequest::fromJson(const web::json::value &val)
        {
            bool ok = true;
            if (val.has_field(utility::conversions::to_string_t(_XPLATSTR("type"))))
            {
                const web::json::value &fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("type")));
                if (!fieldValue.is_null())
                {
                    std::shared_ptr<SearchType> refVal_setType;
                    ok &= ModelBase::fromJson(fieldValue, refVal_setType);
                    setType(refVal_setType);
                }
            }
            if (val.has_field(utility::conversions::to_string_t(_XPLATSTR("query"))))
            {
                const web::json::value &fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("query")));
                if (!fieldValue.is_null())
                {
                    utility::string_t refVal_setQuery;
                    ok &= ModelBase::fromJson(fieldValue, refVal_setQuery);
                    setQuery(refVal_setQuery);
                }
            }
            if (val.has_field(utility::conversions::to_string_t(_XPLATSTR("page"))))
            {
                const web::json::value &fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("page")));
                if (!fieldValue.is_null())
                {
                    int32_t refVal_setPage;
                    ok &= ModelBase::fromJson(fieldValue, refVal_setPage);
                    setPage(refVal_setPage);
                }
            }
            if (val.has_field(utility::conversions::to_string_t(_XPLATSTR("game_id"))))
            {
                const web::json::value &fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("game_id")));
                if (!fieldValue.is_null())
                {
                    utility::string_t refVal_setGameId;
                    ok &= ModelBase::fromJson(fieldValue, refVal_setGameId);
                    setGameId(refVal_setGameId);
                }
            }
            return ok;
        }

        void SearchRequest::toMultipart(std::shared_ptr<MultipartFormData> multipart,
                                        const utility::string_t &prefix) const
        {
            utility::string_t namePrefix = prefix;
            if (namePrefix.size() > 0 &&
                namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
            {
                namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
            }
            if (m_TypeIsSet)
            {
                multipart->add(ModelBase::toHttpContent(
                    namePrefix + utility::conversions::to_string_t(_XPLATSTR("type")), m_Type));
            }
            if (m_QueryIsSet)
            {
                multipart->add(ModelBase::toHttpContent(
                    namePrefix + utility::conversions::to_string_t(_XPLATSTR("query")), m_Query));
            }
            if (m_PageIsSet)
            {
                multipart->add(ModelBase::toHttpContent(
                    namePrefix + utility::conversions::to_string_t(_XPLATSTR("page")), m_Page));
            }
            if (m_Game_idIsSet)
            {
                multipart->add(ModelBase::toHttpContent(
                    namePrefix + utility::conversions::to_string_t(_XPLATSTR("game_id")), m_Game_id));
            }
        }

        bool SearchRequest::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t &prefix)
        {
            bool ok = true;
            utility::string_t namePrefix = prefix;
            if (namePrefix.size() > 0 &&
                namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
            {
                namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
            }

            if (multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("type"))))
            {
                std::shared_ptr<SearchType> refVal_setType;
                ok &= ModelBase::fromHttpContent(
                    multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("type"))), refVal_setType);
                setType(refVal_setType);
            }
            if (multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("query"))))
            {
                utility::string_t refVal_setQuery;
                ok &= ModelBase::fromHttpContent(
                    multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("query"))), refVal_setQuery);
                setQuery(refVal_setQuery);
            }
            if (multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("page"))))
            {
                int32_t refVal_setPage;
                ok &= ModelBase::fromHttpContent(
                    multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("page"))), refVal_setPage);
                setPage(refVal_setPage);
            }
            if (multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("game_id"))))
            {
                utility::string_t refVal_setGameId;
                ok &= ModelBase::fromHttpContent(
                    multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("game_id"))), refVal_setGameId);
                setGameId(refVal_setGameId);
            }
            return ok;
        }

        std::shared_ptr<SearchType> SearchRequest::getType() const
        {
            return m_Type;
        }

        void SearchRequest::setType(const std::shared_ptr<SearchType> &value)
        {
            m_Type = value;
            m_TypeIsSet = true;
        }

        bool SearchRequest::typeIsSet() const
        {
            return m_TypeIsSet;
        }

        void SearchRequest::unsetType()
        {
            m_TypeIsSet = false;
        }
        utility::string_t SearchRequest::getQuery() const
        {
            return m_Query;
        }

        void SearchRequest::setQuery(const utility::string_t &value)
        {
            m_Query = value;
            m_QueryIsSet = true;
        }

        bool SearchRequest::queryIsSet() const
        {
            return m_QueryIsSet;
        }

        void SearchRequest::unsetQuery()
        {
            m_QueryIsSet = false;
        }
        int32_t SearchRequest::getPage() const
        {
            return m_Page;
        }

        void SearchRequest::setPage(int32_t value)
        {
            m_Page = value;
            m_PageIsSet = true;
        }

        bool SearchRequest::pageIsSet() const
        {
            return m_PageIsSet;
        }

        void SearchRequest::unsetPage()
        {
            m_PageIsSet = false;
        }
        utility::string_t SearchRequest::getGameId() const
        {
            return m_Game_id;
        }

        void SearchRequest::setGameId(const utility::string_t &value)
        {
            m_Game_id = value;
            m_Game_idIsSet = true;
        }

        bool SearchRequest::gameIdIsSet() const
        {
            return m_Game_idIsSet;
        }

        void SearchRequest::unsetGame_id()
        {
            m_Game_idIsSet = false;
        }

    }
}
