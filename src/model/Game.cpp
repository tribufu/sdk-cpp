/**
 * Tribufu API
 * REST API to access Tribufu services.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: contact@tribufu.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.12.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "tribufu++/model/Game.h"

namespace tribufu
{
    namespace models
    {

        Game::Game()
        {
            m_Game_port = 0;
            m_Game_portIsSet = false;
            m_Query_port = 0;
            m_Query_portIsSet = false;
            m_Rcon_port = 0;
            m_Rcon_portIsSet = false;
            m_Server_count = 0;
            m_Server_countIsSet = false;
            m_Steam_app_id = 0;
            m_Steam_app_idIsSet = false;
            m_Steam_server_app_id = 0;
            m_Steam_server_app_idIsSet = false;
            m_Enable_servers = false;
            m_Enable_serversIsSet = false;
            m_Rust_gamedig_id = utility::conversions::to_string_t("");
            m_Rust_gamedig_idIsSet = false;
            m_Node_gamedig_id = utility::conversions::to_string_t("");
            m_Node_gamedig_idIsSet = false;
            m_Server_connect_url = utility::conversions::to_string_t("");
            m_Server_connect_urlIsSet = false;
            m_Server_tags = utility::conversions::to_string_t("");
            m_Server_tagsIsSet = false;
            m_Id = utility::conversions::to_string_t("");
            m_IdIsSet = false;
            m_Name = utility::conversions::to_string_t("");
            m_NameIsSet = false;
            m_Description = utility::conversions::to_string_t("");
            m_DescriptionIsSet = false;
            m_TypeIsSet = false;
            m_Organization_id = utility::conversions::to_string_t("");
            m_Organization_idIsSet = false;
            m_Icon_url = utility::conversions::to_string_t("");
            m_Icon_urlIsSet = false;
            m_Banner_url = utility::conversions::to_string_t("");
            m_Banner_urlIsSet = false;
            m_Capsule_image_url = utility::conversions::to_string_t("");
            m_Capsule_image_urlIsSet = false;
            m_Library_image_url = utility::conversions::to_string_t("");
            m_Library_image_urlIsSet = false;
            m_Parent_id = utility::conversions::to_string_t("");
            m_Parent_idIsSet = false;
            m_Slug = utility::conversions::to_string_t("");
            m_SlugIsSet = false;
            m_Visibility = 0;
            m_VisibilityIsSet = false;
            m_Password = utility::conversions::to_string_t("");
            m_PasswordIsSet = false;
            m_Primary = 0;
            m_PrimaryIsSet = false;
            m_User_count = 0;
            m_User_countIsSet = false;
            m_Achievement_count = 0;
            m_Achievement_countIsSet = false;
            m_Badge_count = 0;
            m_Badge_countIsSet = false;
            m_Download_count = 0;
            m_Download_countIsSet = false;
            m_Created = utility::datetime();
            m_CreatedIsSet = false;
            m_Updated = utility::datetime();
            m_UpdatedIsSet = false;
        }

        Game::~Game()
        {
        }

        void Game::validate()
        {
            // TODO: implement validation
        }

        web::json::value Game::toJson() const
        {
            web::json::value val = web::json::value::object();
            if (m_Game_portIsSet)
            {

                val[utility::conversions::to_string_t(U("game_port"))] = ModelBase::toJson(m_Game_port);
            }
            if (m_Query_portIsSet)
            {

                val[utility::conversions::to_string_t(U("query_port"))] = ModelBase::toJson(m_Query_port);
            }
            if (m_Rcon_portIsSet)
            {

                val[utility::conversions::to_string_t(U("rcon_port"))] = ModelBase::toJson(m_Rcon_port);
            }
            if (m_Server_countIsSet)
            {

                val[utility::conversions::to_string_t(U("server_count"))] = ModelBase::toJson(m_Server_count);
            }
            if (m_Steam_app_idIsSet)
            {

                val[utility::conversions::to_string_t(U("steam_app_id"))] = ModelBase::toJson(m_Steam_app_id);
            }
            if (m_Steam_server_app_idIsSet)
            {

                val[utility::conversions::to_string_t(U("steam_server_app_id"))] =
                    ModelBase::toJson(m_Steam_server_app_id);
            }
            if (m_Enable_serversIsSet)
            {

                val[utility::conversions::to_string_t(U("enable_servers"))] = ModelBase::toJson(m_Enable_servers);
            }
            if (m_Rust_gamedig_idIsSet)
            {

                val[utility::conversions::to_string_t(U("rust_gamedig_id"))] = ModelBase::toJson(m_Rust_gamedig_id);
            }
            if (m_Node_gamedig_idIsSet)
            {

                val[utility::conversions::to_string_t(U("node_gamedig_id"))] = ModelBase::toJson(m_Node_gamedig_id);
            }
            if (m_Server_connect_urlIsSet)
            {

                val[utility::conversions::to_string_t(U("server_connect_url"))] =
                    ModelBase::toJson(m_Server_connect_url);
            }
            if (m_Server_tagsIsSet)
            {

                val[utility::conversions::to_string_t(U("server_tags"))] = ModelBase::toJson(m_Server_tags);
            }
            if (m_IdIsSet)
            {

                val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
            }
            if (m_NameIsSet)
            {

                val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
            }
            if (m_DescriptionIsSet)
            {

                val[utility::conversions::to_string_t(U("description"))] = ModelBase::toJson(m_Description);
            }
            if (m_TypeIsSet)
            {

                val[utility::conversions::to_string_t(U("type"))] = ModelBase::toJson(m_Type);
            }
            if (m_Organization_idIsSet)
            {

                val[utility::conversions::to_string_t(U("organization_id"))] = ModelBase::toJson(m_Organization_id);
            }
            if (m_Icon_urlIsSet)
            {

                val[utility::conversions::to_string_t(U("icon_url"))] = ModelBase::toJson(m_Icon_url);
            }
            if (m_Banner_urlIsSet)
            {

                val[utility::conversions::to_string_t(U("banner_url"))] = ModelBase::toJson(m_Banner_url);
            }
            if (m_Capsule_image_urlIsSet)
            {

                val[utility::conversions::to_string_t(U("capsule_image_url"))] = ModelBase::toJson(m_Capsule_image_url);
            }
            if (m_Library_image_urlIsSet)
            {

                val[utility::conversions::to_string_t(U("library_image_url"))] = ModelBase::toJson(m_Library_image_url);
            }
            if (m_Parent_idIsSet)
            {

                val[utility::conversions::to_string_t(U("parent_id"))] = ModelBase::toJson(m_Parent_id);
            }
            if (m_SlugIsSet)
            {

                val[utility::conversions::to_string_t(U("slug"))] = ModelBase::toJson(m_Slug);
            }
            if (m_VisibilityIsSet)
            {

                val[utility::conversions::to_string_t(U("visibility"))] = ModelBase::toJson(m_Visibility);
            }
            if (m_PasswordIsSet)
            {

                val[utility::conversions::to_string_t(U("password"))] = ModelBase::toJson(m_Password);
            }
            if (m_PrimaryIsSet)
            {

                val[utility::conversions::to_string_t(U("primary"))] = ModelBase::toJson(m_Primary);
            }
            if (m_User_countIsSet)
            {

                val[utility::conversions::to_string_t(U("user_count"))] = ModelBase::toJson(m_User_count);
            }
            if (m_Achievement_countIsSet)
            {

                val[utility::conversions::to_string_t(U("achievement_count"))] = ModelBase::toJson(m_Achievement_count);
            }
            if (m_Badge_countIsSet)
            {

                val[utility::conversions::to_string_t(U("badge_count"))] = ModelBase::toJson(m_Badge_count);
            }
            if (m_Download_countIsSet)
            {

                val[utility::conversions::to_string_t(U("download_count"))] = ModelBase::toJson(m_Download_count);
            }
            if (m_CreatedIsSet)
            {

                val[utility::conversions::to_string_t(U("created"))] = ModelBase::toJson(m_Created);
            }
            if (m_UpdatedIsSet)
            {

                val[utility::conversions::to_string_t(U("updated"))] = ModelBase::toJson(m_Updated);
            }

            return val;
        }

        bool Game::fromJson(const web::json::value &val)
        {
            bool ok = true;
            if (val.has_field(utility::conversions::to_string_t(U("game_port"))))
            {
                const web::json::value &fieldValue = val.at(utility::conversions::to_string_t(U("game_port")));
                if (!fieldValue.is_null())
                {
                    int32_t refVal_setGamePort;
                    ok &= ModelBase::fromJson(fieldValue, refVal_setGamePort);
                    setGamePort(refVal_setGamePort);
                }
            }
            if (val.has_field(utility::conversions::to_string_t(U("query_port"))))
            {
                const web::json::value &fieldValue = val.at(utility::conversions::to_string_t(U("query_port")));
                if (!fieldValue.is_null())
                {
                    int32_t refVal_setQueryPort;
                    ok &= ModelBase::fromJson(fieldValue, refVal_setQueryPort);
                    setQueryPort(refVal_setQueryPort);
                }
            }
            if (val.has_field(utility::conversions::to_string_t(U("rcon_port"))))
            {
                const web::json::value &fieldValue = val.at(utility::conversions::to_string_t(U("rcon_port")));
                if (!fieldValue.is_null())
                {
                    int32_t refVal_setRconPort;
                    ok &= ModelBase::fromJson(fieldValue, refVal_setRconPort);
                    setRconPort(refVal_setRconPort);
                }
            }
            if (val.has_field(utility::conversions::to_string_t(U("server_count"))))
            {
                const web::json::value &fieldValue = val.at(utility::conversions::to_string_t(U("server_count")));
                if (!fieldValue.is_null())
                {
                    int32_t refVal_setServerCount;
                    ok &= ModelBase::fromJson(fieldValue, refVal_setServerCount);
                    setServerCount(refVal_setServerCount);
                }
            }
            if (val.has_field(utility::conversions::to_string_t(U("steam_app_id"))))
            {
                const web::json::value &fieldValue = val.at(utility::conversions::to_string_t(U("steam_app_id")));
                if (!fieldValue.is_null())
                {
                    int32_t refVal_setSteamAppId;
                    ok &= ModelBase::fromJson(fieldValue, refVal_setSteamAppId);
                    setSteamAppId(refVal_setSteamAppId);
                }
            }
            if (val.has_field(utility::conversions::to_string_t(U("steam_server_app_id"))))
            {
                const web::json::value &fieldValue =
                    val.at(utility::conversions::to_string_t(U("steam_server_app_id")));
                if (!fieldValue.is_null())
                {
                    int32_t refVal_setSteamServerAppId;
                    ok &= ModelBase::fromJson(fieldValue, refVal_setSteamServerAppId);
                    setSteamServerAppId(refVal_setSteamServerAppId);
                }
            }
            if (val.has_field(utility::conversions::to_string_t(U("enable_servers"))))
            {
                const web::json::value &fieldValue = val.at(utility::conversions::to_string_t(U("enable_servers")));
                if (!fieldValue.is_null())
                {
                    bool refVal_setEnableServers;
                    ok &= ModelBase::fromJson(fieldValue, refVal_setEnableServers);
                    setEnableServers(refVal_setEnableServers);
                }
            }
            if (val.has_field(utility::conversions::to_string_t(U("rust_gamedig_id"))))
            {
                const web::json::value &fieldValue = val.at(utility::conversions::to_string_t(U("rust_gamedig_id")));
                if (!fieldValue.is_null())
                {
                    utility::string_t refVal_setRustGamedigId;
                    ok &= ModelBase::fromJson(fieldValue, refVal_setRustGamedigId);
                    setRustGamedigId(refVal_setRustGamedigId);
                }
            }
            if (val.has_field(utility::conversions::to_string_t(U("node_gamedig_id"))))
            {
                const web::json::value &fieldValue = val.at(utility::conversions::to_string_t(U("node_gamedig_id")));
                if (!fieldValue.is_null())
                {
                    utility::string_t refVal_setNodeGamedigId;
                    ok &= ModelBase::fromJson(fieldValue, refVal_setNodeGamedigId);
                    setNodeGamedigId(refVal_setNodeGamedigId);
                }
            }
            if (val.has_field(utility::conversions::to_string_t(U("server_connect_url"))))
            {
                const web::json::value &fieldValue = val.at(utility::conversions::to_string_t(U("server_connect_url")));
                if (!fieldValue.is_null())
                {
                    utility::string_t refVal_setServerConnectUrl;
                    ok &= ModelBase::fromJson(fieldValue, refVal_setServerConnectUrl);
                    setServerConnectUrl(refVal_setServerConnectUrl);
                }
            }
            if (val.has_field(utility::conversions::to_string_t(U("server_tags"))))
            {
                const web::json::value &fieldValue = val.at(utility::conversions::to_string_t(U("server_tags")));
                if (!fieldValue.is_null())
                {
                    utility::string_t refVal_setServerTags;
                    ok &= ModelBase::fromJson(fieldValue, refVal_setServerTags);
                    setServerTags(refVal_setServerTags);
                }
            }
            if (val.has_field(utility::conversions::to_string_t(U("id"))))
            {
                const web::json::value &fieldValue = val.at(utility::conversions::to_string_t(U("id")));
                if (!fieldValue.is_null())
                {
                    utility::string_t refVal_setId;
                    ok &= ModelBase::fromJson(fieldValue, refVal_setId);
                    setId(refVal_setId);
                }
            }
            if (val.has_field(utility::conversions::to_string_t(U("name"))))
            {
                const web::json::value &fieldValue = val.at(utility::conversions::to_string_t(U("name")));
                if (!fieldValue.is_null())
                {
                    utility::string_t refVal_setName;
                    ok &= ModelBase::fromJson(fieldValue, refVal_setName);
                    setName(refVal_setName);
                }
            }
            if (val.has_field(utility::conversions::to_string_t(U("description"))))
            {
                const web::json::value &fieldValue = val.at(utility::conversions::to_string_t(U("description")));
                if (!fieldValue.is_null())
                {
                    utility::string_t refVal_setDescription;
                    ok &= ModelBase::fromJson(fieldValue, refVal_setDescription);
                    setDescription(refVal_setDescription);
                }
            }
            if (val.has_field(utility::conversions::to_string_t(U("type"))))
            {
                const web::json::value &fieldValue = val.at(utility::conversions::to_string_t(U("type")));
                if (!fieldValue.is_null())
                {
                    std::shared_ptr<ApplicationType> refVal_setType;
                    ok &= ModelBase::fromJson(fieldValue, refVal_setType);
                    setType(refVal_setType);
                }
            }
            if (val.has_field(utility::conversions::to_string_t(U("organization_id"))))
            {
                const web::json::value &fieldValue = val.at(utility::conversions::to_string_t(U("organization_id")));
                if (!fieldValue.is_null())
                {
                    utility::string_t refVal_setOrganizationId;
                    ok &= ModelBase::fromJson(fieldValue, refVal_setOrganizationId);
                    setOrganizationId(refVal_setOrganizationId);
                }
            }
            if (val.has_field(utility::conversions::to_string_t(U("icon_url"))))
            {
                const web::json::value &fieldValue = val.at(utility::conversions::to_string_t(U("icon_url")));
                if (!fieldValue.is_null())
                {
                    utility::string_t refVal_setIconUrl;
                    ok &= ModelBase::fromJson(fieldValue, refVal_setIconUrl);
                    setIconUrl(refVal_setIconUrl);
                }
            }
            if (val.has_field(utility::conversions::to_string_t(U("banner_url"))))
            {
                const web::json::value &fieldValue = val.at(utility::conversions::to_string_t(U("banner_url")));
                if (!fieldValue.is_null())
                {
                    utility::string_t refVal_setBannerUrl;
                    ok &= ModelBase::fromJson(fieldValue, refVal_setBannerUrl);
                    setBannerUrl(refVal_setBannerUrl);
                }
            }
            if (val.has_field(utility::conversions::to_string_t(U("capsule_image_url"))))
            {
                const web::json::value &fieldValue = val.at(utility::conversions::to_string_t(U("capsule_image_url")));
                if (!fieldValue.is_null())
                {
                    utility::string_t refVal_setCapsuleImageUrl;
                    ok &= ModelBase::fromJson(fieldValue, refVal_setCapsuleImageUrl);
                    setCapsuleImageUrl(refVal_setCapsuleImageUrl);
                }
            }
            if (val.has_field(utility::conversions::to_string_t(U("library_image_url"))))
            {
                const web::json::value &fieldValue = val.at(utility::conversions::to_string_t(U("library_image_url")));
                if (!fieldValue.is_null())
                {
                    utility::string_t refVal_setLibraryImageUrl;
                    ok &= ModelBase::fromJson(fieldValue, refVal_setLibraryImageUrl);
                    setLibraryImageUrl(refVal_setLibraryImageUrl);
                }
            }
            if (val.has_field(utility::conversions::to_string_t(U("parent_id"))))
            {
                const web::json::value &fieldValue = val.at(utility::conversions::to_string_t(U("parent_id")));
                if (!fieldValue.is_null())
                {
                    utility::string_t refVal_setParentId;
                    ok &= ModelBase::fromJson(fieldValue, refVal_setParentId);
                    setParentId(refVal_setParentId);
                }
            }
            if (val.has_field(utility::conversions::to_string_t(U("slug"))))
            {
                const web::json::value &fieldValue = val.at(utility::conversions::to_string_t(U("slug")));
                if (!fieldValue.is_null())
                {
                    utility::string_t refVal_setSlug;
                    ok &= ModelBase::fromJson(fieldValue, refVal_setSlug);
                    setSlug(refVal_setSlug);
                }
            }
            if (val.has_field(utility::conversions::to_string_t(U("visibility"))))
            {
                const web::json::value &fieldValue = val.at(utility::conversions::to_string_t(U("visibility")));
                if (!fieldValue.is_null())
                {
                    int32_t refVal_setVisibility;
                    ok &= ModelBase::fromJson(fieldValue, refVal_setVisibility);
                    setVisibility(refVal_setVisibility);
                }
            }
            if (val.has_field(utility::conversions::to_string_t(U("password"))))
            {
                const web::json::value &fieldValue = val.at(utility::conversions::to_string_t(U("password")));
                if (!fieldValue.is_null())
                {
                    utility::string_t refVal_setPassword;
                    ok &= ModelBase::fromJson(fieldValue, refVal_setPassword);
                    setPassword(refVal_setPassword);
                }
            }
            if (val.has_field(utility::conversions::to_string_t(U("primary"))))
            {
                const web::json::value &fieldValue = val.at(utility::conversions::to_string_t(U("primary")));
                if (!fieldValue.is_null())
                {
                    int32_t refVal_setPrimary;
                    ok &= ModelBase::fromJson(fieldValue, refVal_setPrimary);
                    setPrimary(refVal_setPrimary);
                }
            }
            if (val.has_field(utility::conversions::to_string_t(U("user_count"))))
            {
                const web::json::value &fieldValue = val.at(utility::conversions::to_string_t(U("user_count")));
                if (!fieldValue.is_null())
                {
                    int32_t refVal_setUserCount;
                    ok &= ModelBase::fromJson(fieldValue, refVal_setUserCount);
                    setUserCount(refVal_setUserCount);
                }
            }
            if (val.has_field(utility::conversions::to_string_t(U("achievement_count"))))
            {
                const web::json::value &fieldValue = val.at(utility::conversions::to_string_t(U("achievement_count")));
                if (!fieldValue.is_null())
                {
                    int32_t refVal_setAchievementCount;
                    ok &= ModelBase::fromJson(fieldValue, refVal_setAchievementCount);
                    setAchievementCount(refVal_setAchievementCount);
                }
            }
            if (val.has_field(utility::conversions::to_string_t(U("badge_count"))))
            {
                const web::json::value &fieldValue = val.at(utility::conversions::to_string_t(U("badge_count")));
                if (!fieldValue.is_null())
                {
                    int32_t refVal_setBadgeCount;
                    ok &= ModelBase::fromJson(fieldValue, refVal_setBadgeCount);
                    setBadgeCount(refVal_setBadgeCount);
                }
            }
            if (val.has_field(utility::conversions::to_string_t(U("download_count"))))
            {
                const web::json::value &fieldValue = val.at(utility::conversions::to_string_t(U("download_count")));
                if (!fieldValue.is_null())
                {
                    int32_t refVal_setDownloadCount;
                    ok &= ModelBase::fromJson(fieldValue, refVal_setDownloadCount);
                    setDownloadCount(refVal_setDownloadCount);
                }
            }
            if (val.has_field(utility::conversions::to_string_t(U("created"))))
            {
                const web::json::value &fieldValue = val.at(utility::conversions::to_string_t(U("created")));
                if (!fieldValue.is_null())
                {
                    utility::datetime refVal_setCreated;
                    ok &= ModelBase::fromJson(fieldValue, refVal_setCreated);
                    setCreated(refVal_setCreated);
                }
            }
            if (val.has_field(utility::conversions::to_string_t(U("updated"))))
            {
                const web::json::value &fieldValue = val.at(utility::conversions::to_string_t(U("updated")));
                if (!fieldValue.is_null())
                {
                    utility::datetime refVal_setUpdated;
                    ok &= ModelBase::fromJson(fieldValue, refVal_setUpdated);
                    setUpdated(refVal_setUpdated);
                }
            }
            return ok;
        }

        void Game::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t &prefix) const
        {
            utility::string_t namePrefix = prefix;
            if (namePrefix.size() > 0 &&
                namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
            {
                namePrefix += utility::conversions::to_string_t(U("."));
            }
            if (m_Game_portIsSet)
            {
                multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("game_port")),
                                                        m_Game_port));
            }
            if (m_Query_portIsSet)
            {
                multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("query_port")),
                                                        m_Query_port));
            }
            if (m_Rcon_portIsSet)
            {
                multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("rcon_port")),
                                                        m_Rcon_port));
            }
            if (m_Server_countIsSet)
            {
                multipart->add(ModelBase::toHttpContent(
                    namePrefix + utility::conversions::to_string_t(U("server_count")), m_Server_count));
            }
            if (m_Steam_app_idIsSet)
            {
                multipart->add(ModelBase::toHttpContent(
                    namePrefix + utility::conversions::to_string_t(U("steam_app_id")), m_Steam_app_id));
            }
            if (m_Steam_server_app_idIsSet)
            {
                multipart->add(ModelBase::toHttpContent(
                    namePrefix + utility::conversions::to_string_t(U("steam_server_app_id")), m_Steam_server_app_id));
            }
            if (m_Enable_serversIsSet)
            {
                multipart->add(ModelBase::toHttpContent(
                    namePrefix + utility::conversions::to_string_t(U("enable_servers")), m_Enable_servers));
            }
            if (m_Rust_gamedig_idIsSet)
            {
                multipart->add(ModelBase::toHttpContent(
                    namePrefix + utility::conversions::to_string_t(U("rust_gamedig_id")), m_Rust_gamedig_id));
            }
            if (m_Node_gamedig_idIsSet)
            {
                multipart->add(ModelBase::toHttpContent(
                    namePrefix + utility::conversions::to_string_t(U("node_gamedig_id")), m_Node_gamedig_id));
            }
            if (m_Server_connect_urlIsSet)
            {
                multipart->add(ModelBase::toHttpContent(
                    namePrefix + utility::conversions::to_string_t(U("server_connect_url")), m_Server_connect_url));
            }
            if (m_Server_tagsIsSet)
            {
                multipart->add(ModelBase::toHttpContent(
                    namePrefix + utility::conversions::to_string_t(U("server_tags")), m_Server_tags));
            }
            if (m_IdIsSet)
            {
                multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
            }
            if (m_NameIsSet)
            {
                multipart->add(
                    ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
            }
            if (m_DescriptionIsSet)
            {
                multipart->add(ModelBase::toHttpContent(
                    namePrefix + utility::conversions::to_string_t(U("description")), m_Description));
            }
            if (m_TypeIsSet)
            {
                multipart->add(
                    ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("type")), m_Type));
            }
            if (m_Organization_idIsSet)
            {
                multipart->add(ModelBase::toHttpContent(
                    namePrefix + utility::conversions::to_string_t(U("organization_id")), m_Organization_id));
            }
            if (m_Icon_urlIsSet)
            {
                multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("icon_url")),
                                                        m_Icon_url));
            }
            if (m_Banner_urlIsSet)
            {
                multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("banner_url")),
                                                        m_Banner_url));
            }
            if (m_Capsule_image_urlIsSet)
            {
                multipart->add(ModelBase::toHttpContent(
                    namePrefix + utility::conversions::to_string_t(U("capsule_image_url")), m_Capsule_image_url));
            }
            if (m_Library_image_urlIsSet)
            {
                multipart->add(ModelBase::toHttpContent(
                    namePrefix + utility::conversions::to_string_t(U("library_image_url")), m_Library_image_url));
            }
            if (m_Parent_idIsSet)
            {
                multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("parent_id")),
                                                        m_Parent_id));
            }
            if (m_SlugIsSet)
            {
                multipart->add(
                    ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("slug")), m_Slug));
            }
            if (m_VisibilityIsSet)
            {
                multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("visibility")),
                                                        m_Visibility));
            }
            if (m_PasswordIsSet)
            {
                multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("password")),
                                                        m_Password));
            }
            if (m_PrimaryIsSet)
            {
                multipart->add(
                    ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("primary")), m_Primary));
            }
            if (m_User_countIsSet)
            {
                multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("user_count")),
                                                        m_User_count));
            }
            if (m_Achievement_countIsSet)
            {
                multipart->add(ModelBase::toHttpContent(
                    namePrefix + utility::conversions::to_string_t(U("achievement_count")), m_Achievement_count));
            }
            if (m_Badge_countIsSet)
            {
                multipart->add(ModelBase::toHttpContent(
                    namePrefix + utility::conversions::to_string_t(U("badge_count")), m_Badge_count));
            }
            if (m_Download_countIsSet)
            {
                multipart->add(ModelBase::toHttpContent(
                    namePrefix + utility::conversions::to_string_t(U("download_count")), m_Download_count));
            }
            if (m_CreatedIsSet)
            {
                multipart->add(
                    ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("created")), m_Created));
            }
            if (m_UpdatedIsSet)
            {
                multipart->add(
                    ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("updated")), m_Updated));
            }
        }

        bool Game::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t &prefix)
        {
            bool ok = true;
            utility::string_t namePrefix = prefix;
            if (namePrefix.size() > 0 &&
                namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
            {
                namePrefix += utility::conversions::to_string_t(U("."));
            }

            if (multipart->hasContent(utility::conversions::to_string_t(U("game_port"))))
            {
                int32_t refVal_setGamePort;
                ok &= ModelBase::fromHttpContent(
                    multipart->getContent(utility::conversions::to_string_t(U("game_port"))), refVal_setGamePort);
                setGamePort(refVal_setGamePort);
            }
            if (multipart->hasContent(utility::conversions::to_string_t(U("query_port"))))
            {
                int32_t refVal_setQueryPort;
                ok &= ModelBase::fromHttpContent(
                    multipart->getContent(utility::conversions::to_string_t(U("query_port"))), refVal_setQueryPort);
                setQueryPort(refVal_setQueryPort);
            }
            if (multipart->hasContent(utility::conversions::to_string_t(U("rcon_port"))))
            {
                int32_t refVal_setRconPort;
                ok &= ModelBase::fromHttpContent(
                    multipart->getContent(utility::conversions::to_string_t(U("rcon_port"))), refVal_setRconPort);
                setRconPort(refVal_setRconPort);
            }
            if (multipart->hasContent(utility::conversions::to_string_t(U("server_count"))))
            {
                int32_t refVal_setServerCount;
                ok &= ModelBase::fromHttpContent(
                    multipart->getContent(utility::conversions::to_string_t(U("server_count"))), refVal_setServerCount);
                setServerCount(refVal_setServerCount);
            }
            if (multipart->hasContent(utility::conversions::to_string_t(U("steam_app_id"))))
            {
                int32_t refVal_setSteamAppId;
                ok &= ModelBase::fromHttpContent(
                    multipart->getContent(utility::conversions::to_string_t(U("steam_app_id"))), refVal_setSteamAppId);
                setSteamAppId(refVal_setSteamAppId);
            }
            if (multipart->hasContent(utility::conversions::to_string_t(U("steam_server_app_id"))))
            {
                int32_t refVal_setSteamServerAppId;
                ok &= ModelBase::fromHttpContent(
                    multipart->getContent(utility::conversions::to_string_t(U("steam_server_app_id"))),
                    refVal_setSteamServerAppId);
                setSteamServerAppId(refVal_setSteamServerAppId);
            }
            if (multipart->hasContent(utility::conversions::to_string_t(U("enable_servers"))))
            {
                bool refVal_setEnableServers;
                ok &= ModelBase::fromHttpContent(
                    multipart->getContent(utility::conversions::to_string_t(U("enable_servers"))),
                    refVal_setEnableServers);
                setEnableServers(refVal_setEnableServers);
            }
            if (multipart->hasContent(utility::conversions::to_string_t(U("rust_gamedig_id"))))
            {
                utility::string_t refVal_setRustGamedigId;
                ok &= ModelBase::fromHttpContent(
                    multipart->getContent(utility::conversions::to_string_t(U("rust_gamedig_id"))),
                    refVal_setRustGamedigId);
                setRustGamedigId(refVal_setRustGamedigId);
            }
            if (multipart->hasContent(utility::conversions::to_string_t(U("node_gamedig_id"))))
            {
                utility::string_t refVal_setNodeGamedigId;
                ok &= ModelBase::fromHttpContent(
                    multipart->getContent(utility::conversions::to_string_t(U("node_gamedig_id"))),
                    refVal_setNodeGamedigId);
                setNodeGamedigId(refVal_setNodeGamedigId);
            }
            if (multipart->hasContent(utility::conversions::to_string_t(U("server_connect_url"))))
            {
                utility::string_t refVal_setServerConnectUrl;
                ok &= ModelBase::fromHttpContent(
                    multipart->getContent(utility::conversions::to_string_t(U("server_connect_url"))),
                    refVal_setServerConnectUrl);
                setServerConnectUrl(refVal_setServerConnectUrl);
            }
            if (multipart->hasContent(utility::conversions::to_string_t(U("server_tags"))))
            {
                utility::string_t refVal_setServerTags;
                ok &= ModelBase::fromHttpContent(
                    multipart->getContent(utility::conversions::to_string_t(U("server_tags"))), refVal_setServerTags);
                setServerTags(refVal_setServerTags);
            }
            if (multipart->hasContent(utility::conversions::to_string_t(U("id"))))
            {
                utility::string_t refVal_setId;
                ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))),
                                                 refVal_setId);
                setId(refVal_setId);
            }
            if (multipart->hasContent(utility::conversions::to_string_t(U("name"))))
            {
                utility::string_t refVal_setName;
                ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))),
                                                 refVal_setName);
                setName(refVal_setName);
            }
            if (multipart->hasContent(utility::conversions::to_string_t(U("description"))))
            {
                utility::string_t refVal_setDescription;
                ok &= ModelBase::fromHttpContent(
                    multipart->getContent(utility::conversions::to_string_t(U("description"))), refVal_setDescription);
                setDescription(refVal_setDescription);
            }
            if (multipart->hasContent(utility::conversions::to_string_t(U("type"))))
            {
                std::shared_ptr<ApplicationType> refVal_setType;
                ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("type"))),
                                                 refVal_setType);
                setType(refVal_setType);
            }
            if (multipart->hasContent(utility::conversions::to_string_t(U("organization_id"))))
            {
                utility::string_t refVal_setOrganizationId;
                ok &= ModelBase::fromHttpContent(
                    multipart->getContent(utility::conversions::to_string_t(U("organization_id"))),
                    refVal_setOrganizationId);
                setOrganizationId(refVal_setOrganizationId);
            }
            if (multipart->hasContent(utility::conversions::to_string_t(U("icon_url"))))
            {
                utility::string_t refVal_setIconUrl;
                ok &= ModelBase::fromHttpContent(
                    multipart->getContent(utility::conversions::to_string_t(U("icon_url"))), refVal_setIconUrl);
                setIconUrl(refVal_setIconUrl);
            }
            if (multipart->hasContent(utility::conversions::to_string_t(U("banner_url"))))
            {
                utility::string_t refVal_setBannerUrl;
                ok &= ModelBase::fromHttpContent(
                    multipart->getContent(utility::conversions::to_string_t(U("banner_url"))), refVal_setBannerUrl);
                setBannerUrl(refVal_setBannerUrl);
            }
            if (multipart->hasContent(utility::conversions::to_string_t(U("capsule_image_url"))))
            {
                utility::string_t refVal_setCapsuleImageUrl;
                ok &= ModelBase::fromHttpContent(
                    multipart->getContent(utility::conversions::to_string_t(U("capsule_image_url"))),
                    refVal_setCapsuleImageUrl);
                setCapsuleImageUrl(refVal_setCapsuleImageUrl);
            }
            if (multipart->hasContent(utility::conversions::to_string_t(U("library_image_url"))))
            {
                utility::string_t refVal_setLibraryImageUrl;
                ok &= ModelBase::fromHttpContent(
                    multipart->getContent(utility::conversions::to_string_t(U("library_image_url"))),
                    refVal_setLibraryImageUrl);
                setLibraryImageUrl(refVal_setLibraryImageUrl);
            }
            if (multipart->hasContent(utility::conversions::to_string_t(U("parent_id"))))
            {
                utility::string_t refVal_setParentId;
                ok &= ModelBase::fromHttpContent(
                    multipart->getContent(utility::conversions::to_string_t(U("parent_id"))), refVal_setParentId);
                setParentId(refVal_setParentId);
            }
            if (multipart->hasContent(utility::conversions::to_string_t(U("slug"))))
            {
                utility::string_t refVal_setSlug;
                ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("slug"))),
                                                 refVal_setSlug);
                setSlug(refVal_setSlug);
            }
            if (multipart->hasContent(utility::conversions::to_string_t(U("visibility"))))
            {
                int32_t refVal_setVisibility;
                ok &= ModelBase::fromHttpContent(
                    multipart->getContent(utility::conversions::to_string_t(U("visibility"))), refVal_setVisibility);
                setVisibility(refVal_setVisibility);
            }
            if (multipart->hasContent(utility::conversions::to_string_t(U("password"))))
            {
                utility::string_t refVal_setPassword;
                ok &= ModelBase::fromHttpContent(
                    multipart->getContent(utility::conversions::to_string_t(U("password"))), refVal_setPassword);
                setPassword(refVal_setPassword);
            }
            if (multipart->hasContent(utility::conversions::to_string_t(U("primary"))))
            {
                int32_t refVal_setPrimary;
                ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("primary"))),
                                                 refVal_setPrimary);
                setPrimary(refVal_setPrimary);
            }
            if (multipart->hasContent(utility::conversions::to_string_t(U("user_count"))))
            {
                int32_t refVal_setUserCount;
                ok &= ModelBase::fromHttpContent(
                    multipart->getContent(utility::conversions::to_string_t(U("user_count"))), refVal_setUserCount);
                setUserCount(refVal_setUserCount);
            }
            if (multipart->hasContent(utility::conversions::to_string_t(U("achievement_count"))))
            {
                int32_t refVal_setAchievementCount;
                ok &= ModelBase::fromHttpContent(
                    multipart->getContent(utility::conversions::to_string_t(U("achievement_count"))),
                    refVal_setAchievementCount);
                setAchievementCount(refVal_setAchievementCount);
            }
            if (multipart->hasContent(utility::conversions::to_string_t(U("badge_count"))))
            {
                int32_t refVal_setBadgeCount;
                ok &= ModelBase::fromHttpContent(
                    multipart->getContent(utility::conversions::to_string_t(U("badge_count"))), refVal_setBadgeCount);
                setBadgeCount(refVal_setBadgeCount);
            }
            if (multipart->hasContent(utility::conversions::to_string_t(U("download_count"))))
            {
                int32_t refVal_setDownloadCount;
                ok &= ModelBase::fromHttpContent(
                    multipart->getContent(utility::conversions::to_string_t(U("download_count"))),
                    refVal_setDownloadCount);
                setDownloadCount(refVal_setDownloadCount);
            }
            if (multipart->hasContent(utility::conversions::to_string_t(U("created"))))
            {
                utility::datetime refVal_setCreated;
                ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("created"))),
                                                 refVal_setCreated);
                setCreated(refVal_setCreated);
            }
            if (multipart->hasContent(utility::conversions::to_string_t(U("updated"))))
            {
                utility::datetime refVal_setUpdated;
                ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("updated"))),
                                                 refVal_setUpdated);
                setUpdated(refVal_setUpdated);
            }
            return ok;
        }

        int32_t Game::getGamePort() const
        {
            return m_Game_port;
        }

        void Game::setGamePort(int32_t value)
        {
            m_Game_port = value;
            m_Game_portIsSet = true;
        }

        bool Game::gamePortIsSet() const
        {
            return m_Game_portIsSet;
        }

        void Game::unsetGame_port()
        {
            m_Game_portIsSet = false;
        }
        int32_t Game::getQueryPort() const
        {
            return m_Query_port;
        }

        void Game::setQueryPort(int32_t value)
        {
            m_Query_port = value;
            m_Query_portIsSet = true;
        }

        bool Game::queryPortIsSet() const
        {
            return m_Query_portIsSet;
        }

        void Game::unsetQuery_port()
        {
            m_Query_portIsSet = false;
        }
        int32_t Game::getRconPort() const
        {
            return m_Rcon_port;
        }

        void Game::setRconPort(int32_t value)
        {
            m_Rcon_port = value;
            m_Rcon_portIsSet = true;
        }

        bool Game::rconPortIsSet() const
        {
            return m_Rcon_portIsSet;
        }

        void Game::unsetRcon_port()
        {
            m_Rcon_portIsSet = false;
        }
        int32_t Game::getServerCount() const
        {
            return m_Server_count;
        }

        void Game::setServerCount(int32_t value)
        {
            m_Server_count = value;
            m_Server_countIsSet = true;
        }

        bool Game::serverCountIsSet() const
        {
            return m_Server_countIsSet;
        }

        void Game::unsetServer_count()
        {
            m_Server_countIsSet = false;
        }
        int32_t Game::getSteamAppId() const
        {
            return m_Steam_app_id;
        }

        void Game::setSteamAppId(int32_t value)
        {
            m_Steam_app_id = value;
            m_Steam_app_idIsSet = true;
        }

        bool Game::steamAppIdIsSet() const
        {
            return m_Steam_app_idIsSet;
        }

        void Game::unsetSteam_app_id()
        {
            m_Steam_app_idIsSet = false;
        }
        int32_t Game::getSteamServerAppId() const
        {
            return m_Steam_server_app_id;
        }

        void Game::setSteamServerAppId(int32_t value)
        {
            m_Steam_server_app_id = value;
            m_Steam_server_app_idIsSet = true;
        }

        bool Game::steamServerAppIdIsSet() const
        {
            return m_Steam_server_app_idIsSet;
        }

        void Game::unsetSteam_server_app_id()
        {
            m_Steam_server_app_idIsSet = false;
        }
        bool Game::isEnableServers() const
        {
            return m_Enable_servers;
        }

        void Game::setEnableServers(bool value)
        {
            m_Enable_servers = value;
            m_Enable_serversIsSet = true;
        }

        bool Game::enableServersIsSet() const
        {
            return m_Enable_serversIsSet;
        }

        void Game::unsetEnable_servers()
        {
            m_Enable_serversIsSet = false;
        }
        utility::string_t Game::getRustGamedigId() const
        {
            return m_Rust_gamedig_id;
        }

        void Game::setRustGamedigId(const utility::string_t &value)
        {
            m_Rust_gamedig_id = value;
            m_Rust_gamedig_idIsSet = true;
        }

        bool Game::rustGamedigIdIsSet() const
        {
            return m_Rust_gamedig_idIsSet;
        }

        void Game::unsetRust_gamedig_id()
        {
            m_Rust_gamedig_idIsSet = false;
        }
        utility::string_t Game::getNodeGamedigId() const
        {
            return m_Node_gamedig_id;
        }

        void Game::setNodeGamedigId(const utility::string_t &value)
        {
            m_Node_gamedig_id = value;
            m_Node_gamedig_idIsSet = true;
        }

        bool Game::nodeGamedigIdIsSet() const
        {
            return m_Node_gamedig_idIsSet;
        }

        void Game::unsetNode_gamedig_id()
        {
            m_Node_gamedig_idIsSet = false;
        }
        utility::string_t Game::getServerConnectUrl() const
        {
            return m_Server_connect_url;
        }

        void Game::setServerConnectUrl(const utility::string_t &value)
        {
            m_Server_connect_url = value;
            m_Server_connect_urlIsSet = true;
        }

        bool Game::serverConnectUrlIsSet() const
        {
            return m_Server_connect_urlIsSet;
        }

        void Game::unsetServer_connect_url()
        {
            m_Server_connect_urlIsSet = false;
        }
        utility::string_t Game::getServerTags() const
        {
            return m_Server_tags;
        }

        void Game::setServerTags(const utility::string_t &value)
        {
            m_Server_tags = value;
            m_Server_tagsIsSet = true;
        }

        bool Game::serverTagsIsSet() const
        {
            return m_Server_tagsIsSet;
        }

        void Game::unsetServer_tags()
        {
            m_Server_tagsIsSet = false;
        }
        utility::string_t Game::getId() const
        {
            return m_Id;
        }

        void Game::setId(const utility::string_t &value)
        {
            m_Id = value;
            m_IdIsSet = true;
        }

        bool Game::idIsSet() const
        {
            return m_IdIsSet;
        }

        void Game::unsetId()
        {
            m_IdIsSet = false;
        }
        utility::string_t Game::getName() const
        {
            return m_Name;
        }

        void Game::setName(const utility::string_t &value)
        {
            m_Name = value;
            m_NameIsSet = true;
        }

        bool Game::nameIsSet() const
        {
            return m_NameIsSet;
        }

        void Game::unsetName()
        {
            m_NameIsSet = false;
        }
        utility::string_t Game::getDescription() const
        {
            return m_Description;
        }

        void Game::setDescription(const utility::string_t &value)
        {
            m_Description = value;
            m_DescriptionIsSet = true;
        }

        bool Game::descriptionIsSet() const
        {
            return m_DescriptionIsSet;
        }

        void Game::unsetDescription()
        {
            m_DescriptionIsSet = false;
        }
        std::shared_ptr<ApplicationType> Game::getType() const
        {
            return m_Type;
        }

        void Game::setType(const std::shared_ptr<ApplicationType> &value)
        {
            m_Type = value;
            m_TypeIsSet = true;
        }

        bool Game::typeIsSet() const
        {
            return m_TypeIsSet;
        }

        void Game::unsetType()
        {
            m_TypeIsSet = false;
        }
        utility::string_t Game::getOrganizationId() const
        {
            return m_Organization_id;
        }

        void Game::setOrganizationId(const utility::string_t &value)
        {
            m_Organization_id = value;
            m_Organization_idIsSet = true;
        }

        bool Game::organizationIdIsSet() const
        {
            return m_Organization_idIsSet;
        }

        void Game::unsetOrganization_id()
        {
            m_Organization_idIsSet = false;
        }
        utility::string_t Game::getIconUrl() const
        {
            return m_Icon_url;
        }

        void Game::setIconUrl(const utility::string_t &value)
        {
            m_Icon_url = value;
            m_Icon_urlIsSet = true;
        }

        bool Game::iconUrlIsSet() const
        {
            return m_Icon_urlIsSet;
        }

        void Game::unsetIcon_url()
        {
            m_Icon_urlIsSet = false;
        }
        utility::string_t Game::getBannerUrl() const
        {
            return m_Banner_url;
        }

        void Game::setBannerUrl(const utility::string_t &value)
        {
            m_Banner_url = value;
            m_Banner_urlIsSet = true;
        }

        bool Game::bannerUrlIsSet() const
        {
            return m_Banner_urlIsSet;
        }

        void Game::unsetBanner_url()
        {
            m_Banner_urlIsSet = false;
        }
        utility::string_t Game::getCapsuleImageUrl() const
        {
            return m_Capsule_image_url;
        }

        void Game::setCapsuleImageUrl(const utility::string_t &value)
        {
            m_Capsule_image_url = value;
            m_Capsule_image_urlIsSet = true;
        }

        bool Game::capsuleImageUrlIsSet() const
        {
            return m_Capsule_image_urlIsSet;
        }

        void Game::unsetCapsule_image_url()
        {
            m_Capsule_image_urlIsSet = false;
        }
        utility::string_t Game::getLibraryImageUrl() const
        {
            return m_Library_image_url;
        }

        void Game::setLibraryImageUrl(const utility::string_t &value)
        {
            m_Library_image_url = value;
            m_Library_image_urlIsSet = true;
        }

        bool Game::libraryImageUrlIsSet() const
        {
            return m_Library_image_urlIsSet;
        }

        void Game::unsetLibrary_image_url()
        {
            m_Library_image_urlIsSet = false;
        }
        utility::string_t Game::getParentId() const
        {
            return m_Parent_id;
        }

        void Game::setParentId(const utility::string_t &value)
        {
            m_Parent_id = value;
            m_Parent_idIsSet = true;
        }

        bool Game::parentIdIsSet() const
        {
            return m_Parent_idIsSet;
        }

        void Game::unsetParent_id()
        {
            m_Parent_idIsSet = false;
        }
        utility::string_t Game::getSlug() const
        {
            return m_Slug;
        }

        void Game::setSlug(const utility::string_t &value)
        {
            m_Slug = value;
            m_SlugIsSet = true;
        }

        bool Game::slugIsSet() const
        {
            return m_SlugIsSet;
        }

        void Game::unsetSlug()
        {
            m_SlugIsSet = false;
        }
        int32_t Game::getVisibility() const
        {
            return m_Visibility;
        }

        void Game::setVisibility(int32_t value)
        {
            m_Visibility = value;
            m_VisibilityIsSet = true;
        }

        bool Game::visibilityIsSet() const
        {
            return m_VisibilityIsSet;
        }

        void Game::unsetVisibility()
        {
            m_VisibilityIsSet = false;
        }
        utility::string_t Game::getPassword() const
        {
            return m_Password;
        }

        void Game::setPassword(const utility::string_t &value)
        {
            m_Password = value;
            m_PasswordIsSet = true;
        }

        bool Game::passwordIsSet() const
        {
            return m_PasswordIsSet;
        }

        void Game::unsetPassword()
        {
            m_PasswordIsSet = false;
        }
        int32_t Game::getPrimary() const
        {
            return m_Primary;
        }

        void Game::setPrimary(int32_t value)
        {
            m_Primary = value;
            m_PrimaryIsSet = true;
        }

        bool Game::primaryIsSet() const
        {
            return m_PrimaryIsSet;
        }

        void Game::unsetPrimary()
        {
            m_PrimaryIsSet = false;
        }
        int32_t Game::getUserCount() const
        {
            return m_User_count;
        }

        void Game::setUserCount(int32_t value)
        {
            m_User_count = value;
            m_User_countIsSet = true;
        }

        bool Game::userCountIsSet() const
        {
            return m_User_countIsSet;
        }

        void Game::unsetUser_count()
        {
            m_User_countIsSet = false;
        }
        int32_t Game::getAchievementCount() const
        {
            return m_Achievement_count;
        }

        void Game::setAchievementCount(int32_t value)
        {
            m_Achievement_count = value;
            m_Achievement_countIsSet = true;
        }

        bool Game::achievementCountIsSet() const
        {
            return m_Achievement_countIsSet;
        }

        void Game::unsetAchievement_count()
        {
            m_Achievement_countIsSet = false;
        }
        int32_t Game::getBadgeCount() const
        {
            return m_Badge_count;
        }

        void Game::setBadgeCount(int32_t value)
        {
            m_Badge_count = value;
            m_Badge_countIsSet = true;
        }

        bool Game::badgeCountIsSet() const
        {
            return m_Badge_countIsSet;
        }

        void Game::unsetBadge_count()
        {
            m_Badge_countIsSet = false;
        }
        int32_t Game::getDownloadCount() const
        {
            return m_Download_count;
        }

        void Game::setDownloadCount(int32_t value)
        {
            m_Download_count = value;
            m_Download_countIsSet = true;
        }

        bool Game::downloadCountIsSet() const
        {
            return m_Download_countIsSet;
        }

        void Game::unsetDownload_count()
        {
            m_Download_countIsSet = false;
        }
        utility::datetime Game::getCreated() const
        {
            return m_Created;
        }

        void Game::setCreated(const utility::datetime &value)
        {
            m_Created = value;
            m_CreatedIsSet = true;
        }

        bool Game::createdIsSet() const
        {
            return m_CreatedIsSet;
        }

        void Game::unsetCreated()
        {
            m_CreatedIsSet = false;
        }
        utility::datetime Game::getUpdated() const
        {
            return m_Updated;
        }

        void Game::setUpdated(const utility::datetime &value)
        {
            m_Updated = value;
            m_UpdatedIsSet = true;
        }

        bool Game::updatedIsSet() const
        {
            return m_UpdatedIsSet;
        }

        void Game::unsetUpdated()
        {
            m_UpdatedIsSet = false;
        }

    }
}
