/**
 * Tribufu API
 * REST API to access Tribufu services.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: contact@tribufu.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.12.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "tribufu++/model/UserInfo.h"

namespace tribufu {
namespace models {

UserInfo::UserInfo()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Uuid = utility::conversions::to_string_t("");
    m_UuidIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Display_name = utility::conversions::to_string_t("");
    m_Display_nameIsSet = false;
    m_Email = utility::conversions::to_string_t("");
    m_EmailIsSet = false;
    m_TypeIsSet = false;
    m_Flags = utility::conversions::to_string_t("");
    m_FlagsIsSet = false;
    m_Permissions = utility::conversions::to_string_t("");
    m_PermissionsIsSet = false;
    m_Verified = false;
    m_VerifiedIsSet = false;
    m_Level = 0;
    m_LevelIsSet = false;
    m_Experience = 0.0;
    m_ExperienceIsSet = false;
    m_Public_birthday = false;
    m_Public_birthdayIsSet = false;
    m_BirthdayIsSet = false;
    m_Points = 0.0;
    m_PointsIsSet = false;
    m_Location = utility::conversions::to_string_t("");
    m_LocationIsSet = false;
    m_Language = utility::conversions::to_string_t("");
    m_LanguageIsSet = false;
    m_Timezone = utility::conversions::to_string_t("");
    m_TimezoneIsSet = false;
    m_Currency = utility::conversions::to_string_t("");
    m_CurrencyIsSet = false;
    m_Photo_url = utility::conversions::to_string_t("");
    m_Photo_urlIsSet = false;
    m_Banner_url = utility::conversions::to_string_t("");
    m_Banner_urlIsSet = false;
    m_Last_online = utility::datetime();
    m_Last_onlineIsSet = false;
    m_Biography = utility::conversions::to_string_t("");
    m_BiographyIsSet = false;
    m_View_count = 0;
    m_View_countIsSet = false;
    m_Created = utility::datetime();
    m_CreatedIsSet = false;
    m_Updated = utility::datetime();
    m_UpdatedIsSet = false;
}

UserInfo::~UserInfo()
{
}

void UserInfo::validate()
{
    // TODO: implement validation
}

web::json::value UserInfo::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_IdIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_UuidIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("uuid"))] = ModelBase::toJson(m_Uuid);
    }
    if(m_NameIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_Display_nameIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("display_name"))] = ModelBase::toJson(m_Display_name);
    }
    if(m_EmailIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("email"))] = ModelBase::toJson(m_Email);
    }
    if(m_TypeIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("type"))] = ModelBase::toJson(m_Type);
    }
    if(m_FlagsIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("flags"))] = ModelBase::toJson(m_Flags);
    }
    if(m_PermissionsIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("permissions"))] = ModelBase::toJson(m_Permissions);
    }
    if(m_VerifiedIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("verified"))] = ModelBase::toJson(m_Verified);
    }
    if(m_LevelIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("level"))] = ModelBase::toJson(m_Level);
    }
    if(m_ExperienceIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("experience"))] = ModelBase::toJson(m_Experience);
    }
    if(m_Public_birthdayIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("public_birthday"))] = ModelBase::toJson(m_Public_birthday);
    }
    if(m_BirthdayIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("birthday"))] = ModelBase::toJson(m_Birthday);
    }
    if(m_PointsIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("points"))] = ModelBase::toJson(m_Points);
    }
    if(m_LocationIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("location"))] = ModelBase::toJson(m_Location);
    }
    if(m_LanguageIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("language"))] = ModelBase::toJson(m_Language);
    }
    if(m_TimezoneIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("timezone"))] = ModelBase::toJson(m_Timezone);
    }
    if(m_CurrencyIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("currency"))] = ModelBase::toJson(m_Currency);
    }
    if(m_Photo_urlIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("photo_url"))] = ModelBase::toJson(m_Photo_url);
    }
    if(m_Banner_urlIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("banner_url"))] = ModelBase::toJson(m_Banner_url);
    }
    if(m_Last_onlineIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("last_online"))] = ModelBase::toJson(m_Last_online);
    }
    if(m_BiographyIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("biography"))] = ModelBase::toJson(m_Biography);
    }
    if(m_View_countIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("view_count"))] = ModelBase::toJson(m_View_count);
    }
    if(m_CreatedIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("created"))] = ModelBase::toJson(m_Created);
    }
    if(m_UpdatedIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("updated"))] = ModelBase::toJson(m_Updated);
    }

    return val;
}

bool UserInfo::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("uuid"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("uuid")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setUuid;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUuid);
            setUuid(refVal_setUuid);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("display_name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("display_name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDisplayName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDisplayName);
            setDisplayName(refVal_setDisplayName);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("email"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("email")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setEmail;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEmail);
            setEmail(refVal_setEmail);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("type")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<UserType> refVal_setType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setType);
            setType(refVal_setType);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("flags"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("flags")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setFlags;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFlags);
            setFlags(refVal_setFlags);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("permissions"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("permissions")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPermissions;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPermissions);
            setPermissions(refVal_setPermissions);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("verified"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("verified")));
        if(!fieldValue.is_null())
        {
            bool refVal_setVerified;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVerified);
            setVerified(refVal_setVerified);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("level"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("level")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setLevel;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLevel);
            setLevel(refVal_setLevel);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("experience"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("experience")));
        if(!fieldValue.is_null())
        {
            double refVal_setExperience;
            ok &= ModelBase::fromJson(fieldValue, refVal_setExperience);
            setExperience(refVal_setExperience);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("public_birthday"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("public_birthday")));
        if(!fieldValue.is_null())
        {
            bool refVal_setPublicBirthday;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPublicBirthday);
            setPublicBirthday(refVal_setPublicBirthday);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("birthday"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("birthday")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setBirthday;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBirthday);
            setBirthday(refVal_setBirthday);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("points"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("points")));
        if(!fieldValue.is_null())
        {
            double refVal_setPoints;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPoints);
            setPoints(refVal_setPoints);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("location"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("location")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLocation;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLocation);
            setLocation(refVal_setLocation);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("language"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("language")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLanguage;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLanguage);
            setLanguage(refVal_setLanguage);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("timezone"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("timezone")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTimezone;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTimezone);
            setTimezone(refVal_setTimezone);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("currency"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("currency")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCurrency;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCurrency);
            setCurrency(refVal_setCurrency);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("photo_url"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("photo_url")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPhotoUrl;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPhotoUrl);
            setPhotoUrl(refVal_setPhotoUrl);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("banner_url"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("banner_url")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setBannerUrl;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBannerUrl);
            setBannerUrl(refVal_setBannerUrl);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("last_online"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("last_online")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setLastOnline;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLastOnline);
            setLastOnline(refVal_setLastOnline);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("biography"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("biography")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setBiography;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBiography);
            setBiography(refVal_setBiography);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("view_count"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("view_count")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setViewCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setViewCount);
            setViewCount(refVal_setViewCount);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("created"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("created")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setCreated;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreated);
            setCreated(refVal_setCreated);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("updated"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("updated")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setUpdated;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUpdated);
            setUpdated(refVal_setUpdated);
            
        }
    }
    return ok;
}

void UserInfo::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_UuidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("uuid")), m_Uuid));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_Display_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("display_name")), m_Display_name));
    }
    if(m_EmailIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("email")), m_Email));
    }
    if(m_TypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("type")), m_Type));
    }
    if(m_FlagsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("flags")), m_Flags));
    }
    if(m_PermissionsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("permissions")), m_Permissions));
    }
    if(m_VerifiedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("verified")), m_Verified));
    }
    if(m_LevelIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("level")), m_Level));
    }
    if(m_ExperienceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("experience")), m_Experience));
    }
    if(m_Public_birthdayIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("public_birthday")), m_Public_birthday));
    }
    if(m_BirthdayIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("birthday")), m_Birthday));
    }
    if(m_PointsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("points")), m_Points));
    }
    if(m_LocationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("location")), m_Location));
    }
    if(m_LanguageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("language")), m_Language));
    }
    if(m_TimezoneIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("timezone")), m_Timezone));
    }
    if(m_CurrencyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("currency")), m_Currency));
    }
    if(m_Photo_urlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("photo_url")), m_Photo_url));
    }
    if(m_Banner_urlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("banner_url")), m_Banner_url));
    }
    if(m_Last_onlineIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("last_online")), m_Last_online));
    }
    if(m_BiographyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("biography")), m_Biography));
    }
    if(m_View_countIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("view_count")), m_View_count));
    }
    if(m_CreatedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("created")), m_Created));
    }
    if(m_UpdatedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("updated")), m_Updated));
    }
}

bool UserInfo::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("uuid"))))
    {
        utility::string_t refVal_setUuid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("uuid"))), refVal_setUuid );
        setUuid(refVal_setUuid);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("display_name"))))
    {
        utility::string_t refVal_setDisplayName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("display_name"))), refVal_setDisplayName );
        setDisplayName(refVal_setDisplayName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("email"))))
    {
        utility::string_t refVal_setEmail;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("email"))), refVal_setEmail );
        setEmail(refVal_setEmail);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("type"))))
    {
        std::shared_ptr<UserType> refVal_setType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("type"))), refVal_setType );
        setType(refVal_setType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("flags"))))
    {
        utility::string_t refVal_setFlags;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("flags"))), refVal_setFlags );
        setFlags(refVal_setFlags);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("permissions"))))
    {
        utility::string_t refVal_setPermissions;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("permissions"))), refVal_setPermissions );
        setPermissions(refVal_setPermissions);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("verified"))))
    {
        bool refVal_setVerified;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("verified"))), refVal_setVerified );
        setVerified(refVal_setVerified);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("level"))))
    {
        int32_t refVal_setLevel;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("level"))), refVal_setLevel );
        setLevel(refVal_setLevel);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("experience"))))
    {
        double refVal_setExperience;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("experience"))), refVal_setExperience );
        setExperience(refVal_setExperience);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("public_birthday"))))
    {
        bool refVal_setPublicBirthday;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("public_birthday"))), refVal_setPublicBirthday );
        setPublicBirthday(refVal_setPublicBirthday);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("birthday"))))
    {
        utility::datetime refVal_setBirthday;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("birthday"))), refVal_setBirthday );
        setBirthday(refVal_setBirthday);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("points"))))
    {
        double refVal_setPoints;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("points"))), refVal_setPoints );
        setPoints(refVal_setPoints);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("location"))))
    {
        utility::string_t refVal_setLocation;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("location"))), refVal_setLocation );
        setLocation(refVal_setLocation);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("language"))))
    {
        utility::string_t refVal_setLanguage;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("language"))), refVal_setLanguage );
        setLanguage(refVal_setLanguage);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("timezone"))))
    {
        utility::string_t refVal_setTimezone;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("timezone"))), refVal_setTimezone );
        setTimezone(refVal_setTimezone);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("currency"))))
    {
        utility::string_t refVal_setCurrency;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("currency"))), refVal_setCurrency );
        setCurrency(refVal_setCurrency);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("photo_url"))))
    {
        utility::string_t refVal_setPhotoUrl;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("photo_url"))), refVal_setPhotoUrl );
        setPhotoUrl(refVal_setPhotoUrl);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("banner_url"))))
    {
        utility::string_t refVal_setBannerUrl;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("banner_url"))), refVal_setBannerUrl );
        setBannerUrl(refVal_setBannerUrl);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("last_online"))))
    {
        utility::datetime refVal_setLastOnline;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("last_online"))), refVal_setLastOnline );
        setLastOnline(refVal_setLastOnline);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("biography"))))
    {
        utility::string_t refVal_setBiography;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("biography"))), refVal_setBiography );
        setBiography(refVal_setBiography);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("view_count"))))
    {
        int32_t refVal_setViewCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("view_count"))), refVal_setViewCount );
        setViewCount(refVal_setViewCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("created"))))
    {
        utility::datetime refVal_setCreated;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("created"))), refVal_setCreated );
        setCreated(refVal_setCreated);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("updated"))))
    {
        utility::datetime refVal_setUpdated;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("updated"))), refVal_setUpdated );
        setUpdated(refVal_setUpdated);
    }
    return ok;
}


utility::string_t UserInfo::getId() const
{
    return m_Id;
}


void UserInfo::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool UserInfo::idIsSet() const
{
    return m_IdIsSet;
}

void UserInfo::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t UserInfo::getUuid() const
{
    return m_Uuid;
}


void UserInfo::setUuid(const utility::string_t& value)
{
    m_Uuid = value;
    m_UuidIsSet = true;
}

bool UserInfo::uuidIsSet() const
{
    return m_UuidIsSet;
}

void UserInfo::unsetUuid()
{
    m_UuidIsSet = false;
}
utility::string_t UserInfo::getName() const
{
    return m_Name;
}


void UserInfo::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool UserInfo::nameIsSet() const
{
    return m_NameIsSet;
}

void UserInfo::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t UserInfo::getDisplayName() const
{
    return m_Display_name;
}


void UserInfo::setDisplayName(const utility::string_t& value)
{
    m_Display_name = value;
    m_Display_nameIsSet = true;
}

bool UserInfo::displayNameIsSet() const
{
    return m_Display_nameIsSet;
}

void UserInfo::unsetDisplay_name()
{
    m_Display_nameIsSet = false;
}
utility::string_t UserInfo::getEmail() const
{
    return m_Email;
}


void UserInfo::setEmail(const utility::string_t& value)
{
    m_Email = value;
    m_EmailIsSet = true;
}

bool UserInfo::emailIsSet() const
{
    return m_EmailIsSet;
}

void UserInfo::unsetEmail()
{
    m_EmailIsSet = false;
}
std::shared_ptr<UserType> UserInfo::getType() const
{
    return m_Type;
}


void UserInfo::setType(const std::shared_ptr<UserType>& value)
{
    m_Type = value;
    m_TypeIsSet = true;
}

bool UserInfo::typeIsSet() const
{
    return m_TypeIsSet;
}

void UserInfo::unsetType()
{
    m_TypeIsSet = false;
}
utility::string_t UserInfo::getFlags() const
{
    return m_Flags;
}


void UserInfo::setFlags(const utility::string_t& value)
{
    m_Flags = value;
    m_FlagsIsSet = true;
}

bool UserInfo::flagsIsSet() const
{
    return m_FlagsIsSet;
}

void UserInfo::unsetFlags()
{
    m_FlagsIsSet = false;
}
utility::string_t UserInfo::getPermissions() const
{
    return m_Permissions;
}


void UserInfo::setPermissions(const utility::string_t& value)
{
    m_Permissions = value;
    m_PermissionsIsSet = true;
}

bool UserInfo::permissionsIsSet() const
{
    return m_PermissionsIsSet;
}

void UserInfo::unsetPermissions()
{
    m_PermissionsIsSet = false;
}
bool UserInfo::isVerified() const
{
    return m_Verified;
}

void UserInfo::setVerified(bool value)
{
    m_Verified = value;
    m_VerifiedIsSet = true;
}

bool UserInfo::verifiedIsSet() const
{
    return m_VerifiedIsSet;
}

void UserInfo::unsetVerified()
{
    m_VerifiedIsSet = false;
}
int32_t UserInfo::getLevel() const
{
    return m_Level;
}

void UserInfo::setLevel(int32_t value)
{
    m_Level = value;
    m_LevelIsSet = true;
}

bool UserInfo::levelIsSet() const
{
    return m_LevelIsSet;
}

void UserInfo::unsetLevel()
{
    m_LevelIsSet = false;
}
double UserInfo::getExperience() const
{
    return m_Experience;
}

void UserInfo::setExperience(double value)
{
    m_Experience = value;
    m_ExperienceIsSet = true;
}

bool UserInfo::experienceIsSet() const
{
    return m_ExperienceIsSet;
}

void UserInfo::unsetExperience()
{
    m_ExperienceIsSet = false;
}
bool UserInfo::isPublicBirthday() const
{
    return m_Public_birthday;
}

void UserInfo::setPublicBirthday(bool value)
{
    m_Public_birthday = value;
    m_Public_birthdayIsSet = true;
}

bool UserInfo::publicBirthdayIsSet() const
{
    return m_Public_birthdayIsSet;
}

void UserInfo::unsetPublic_birthday()
{
    m_Public_birthdayIsSet = false;
}
utility::datetime UserInfo::getBirthday() const
{
    return m_Birthday;
}


void UserInfo::setBirthday(const utility::datetime& value)
{
    m_Birthday = value;
    m_BirthdayIsSet = true;
}

bool UserInfo::birthdayIsSet() const
{
    return m_BirthdayIsSet;
}

void UserInfo::unsetBirthday()
{
    m_BirthdayIsSet = false;
}
double UserInfo::getPoints() const
{
    return m_Points;
}

void UserInfo::setPoints(double value)
{
    m_Points = value;
    m_PointsIsSet = true;
}

bool UserInfo::pointsIsSet() const
{
    return m_PointsIsSet;
}

void UserInfo::unsetPoints()
{
    m_PointsIsSet = false;
}
utility::string_t UserInfo::getLocation() const
{
    return m_Location;
}


void UserInfo::setLocation(const utility::string_t& value)
{
    m_Location = value;
    m_LocationIsSet = true;
}

bool UserInfo::locationIsSet() const
{
    return m_LocationIsSet;
}

void UserInfo::unsetLocation()
{
    m_LocationIsSet = false;
}
utility::string_t UserInfo::getLanguage() const
{
    return m_Language;
}


void UserInfo::setLanguage(const utility::string_t& value)
{
    m_Language = value;
    m_LanguageIsSet = true;
}

bool UserInfo::languageIsSet() const
{
    return m_LanguageIsSet;
}

void UserInfo::unsetLanguage()
{
    m_LanguageIsSet = false;
}
utility::string_t UserInfo::getTimezone() const
{
    return m_Timezone;
}


void UserInfo::setTimezone(const utility::string_t& value)
{
    m_Timezone = value;
    m_TimezoneIsSet = true;
}

bool UserInfo::timezoneIsSet() const
{
    return m_TimezoneIsSet;
}

void UserInfo::unsetTimezone()
{
    m_TimezoneIsSet = false;
}
utility::string_t UserInfo::getCurrency() const
{
    return m_Currency;
}


void UserInfo::setCurrency(const utility::string_t& value)
{
    m_Currency = value;
    m_CurrencyIsSet = true;
}

bool UserInfo::currencyIsSet() const
{
    return m_CurrencyIsSet;
}

void UserInfo::unsetCurrency()
{
    m_CurrencyIsSet = false;
}
utility::string_t UserInfo::getPhotoUrl() const
{
    return m_Photo_url;
}


void UserInfo::setPhotoUrl(const utility::string_t& value)
{
    m_Photo_url = value;
    m_Photo_urlIsSet = true;
}

bool UserInfo::photoUrlIsSet() const
{
    return m_Photo_urlIsSet;
}

void UserInfo::unsetPhoto_url()
{
    m_Photo_urlIsSet = false;
}
utility::string_t UserInfo::getBannerUrl() const
{
    return m_Banner_url;
}


void UserInfo::setBannerUrl(const utility::string_t& value)
{
    m_Banner_url = value;
    m_Banner_urlIsSet = true;
}

bool UserInfo::bannerUrlIsSet() const
{
    return m_Banner_urlIsSet;
}

void UserInfo::unsetBanner_url()
{
    m_Banner_urlIsSet = false;
}
utility::datetime UserInfo::getLastOnline() const
{
    return m_Last_online;
}


void UserInfo::setLastOnline(const utility::datetime& value)
{
    m_Last_online = value;
    m_Last_onlineIsSet = true;
}

bool UserInfo::lastOnlineIsSet() const
{
    return m_Last_onlineIsSet;
}

void UserInfo::unsetLast_online()
{
    m_Last_onlineIsSet = false;
}
utility::string_t UserInfo::getBiography() const
{
    return m_Biography;
}


void UserInfo::setBiography(const utility::string_t& value)
{
    m_Biography = value;
    m_BiographyIsSet = true;
}

bool UserInfo::biographyIsSet() const
{
    return m_BiographyIsSet;
}

void UserInfo::unsetBiography()
{
    m_BiographyIsSet = false;
}
int32_t UserInfo::getViewCount() const
{
    return m_View_count;
}

void UserInfo::setViewCount(int32_t value)
{
    m_View_count = value;
    m_View_countIsSet = true;
}

bool UserInfo::viewCountIsSet() const
{
    return m_View_countIsSet;
}

void UserInfo::unsetView_count()
{
    m_View_countIsSet = false;
}
utility::datetime UserInfo::getCreated() const
{
    return m_Created;
}


void UserInfo::setCreated(const utility::datetime& value)
{
    m_Created = value;
    m_CreatedIsSet = true;
}

bool UserInfo::createdIsSet() const
{
    return m_CreatedIsSet;
}

void UserInfo::unsetCreated()
{
    m_CreatedIsSet = false;
}
utility::datetime UserInfo::getUpdated() const
{
    return m_Updated;
}


void UserInfo::setUpdated(const utility::datetime& value)
{
    m_Updated = value;
    m_UpdatedIsSet = true;
}

bool UserInfo::updatedIsSet() const
{
    return m_UpdatedIsSet;
}

void UserInfo::unsetUpdated()
{
    m_UpdatedIsSet = false;
}

}
}


