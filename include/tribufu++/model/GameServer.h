/**
 * Tribufu API
 * REST API to access Tribufu services.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: contact@tribufu.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.12.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * GameServer.h
 *
 *
 */

#ifndef TRIBUFU_MODELS_GameServer_H_
#define TRIBUFU_MODELS_GameServer_H_

#include <stdexcept>

#include "tribufu++/ModelBase.h"

#include "tribufu++/model/ServerStatus.h"
#include <cpprest/details/basic_types.h>

namespace tribufu
{
    namespace models
    {

        class GameServer : public ModelBase
        {
        public:
            GameServer();
            virtual ~GameServer();

            /////////////////////////////////////////////
            /// ModelBase overrides

            void validate() override;

            web::json::value toJson() const override;
            bool fromJson(const web::json::value &json) override;

            void toMultipart(std::shared_ptr<MultipartFormData> multipart,
                             const utility::string_t &namePrefix) const override;
            bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart,
                               const utility::string_t &namePrefix) override;

            /////////////////////////////////////////////
            /// GameServer members

            utility::string_t getId() const;
            bool idIsSet() const;
            void unsetId();
            void setId(const utility::string_t &value);

            utility::string_t getName() const;
            bool nameIsSet() const;
            void unsetName();
            void setName(const utility::string_t &value);

            utility::string_t getDescription() const;
            bool descriptionIsSet() const;
            void unsetDescription();
            void setDescription(const utility::string_t &value);

            utility::string_t getAddress() const;
            bool addressIsSet() const;
            void unsetAddress();
            void setAddress(const utility::string_t &value);

            int32_t getGamePort() const;
            bool gamePortIsSet() const;
            void unsetGame_port();
            void setGamePort(int32_t value);

            int32_t getQueryPort() const;
            bool queryPortIsSet() const;
            void unsetQuery_port();
            void setQueryPort(int32_t value);

            utility::string_t getGameId() const;
            bool gameIdIsSet() const;
            void unsetGame_id();
            void setGameId(const utility::string_t &value);

            utility::string_t getGameIconUrl() const;
            bool gameIconUrlIsSet() const;
            void unsetGame_icon_url();
            void setGameIconUrl(const utility::string_t &value);

            utility::string_t getVersion() const;
            bool versionIsSet() const;
            void unsetVersion();
            void setVersion(const utility::string_t &value);

            bool isFeatured() const;
            bool featuredIsSet() const;
            void unsetFeatured();
            void setFeatured(bool value);

            utility::string_t getClusterId() const;
            bool clusterIdIsSet() const;
            void unsetCluster_id();
            void setClusterId(const utility::string_t &value);

            utility::string_t getWebsiteUrl() const;
            bool websiteUrlIsSet() const;
            void unsetWebsite_url();
            void setWebsiteUrl(const utility::string_t &value);

            utility::string_t getBannerUrl() const;
            bool bannerUrlIsSet() const;
            void unsetBanner_url();
            void setBannerUrl(const utility::string_t &value);

            utility::string_t getOwnerId() const;
            bool ownerIdIsSet() const;
            void unsetOwner_id();
            void setOwnerId(const utility::string_t &value);

            double getUptime() const;
            bool uptimeIsSet() const;
            void unsetUptime();
            void setUptime(double value);

            std::shared_ptr<ServerStatus> getStatus() const;
            bool statusIsSet() const;
            void unsetStatus();
            void setStatus(const std::shared_ptr<ServerStatus> &value);

            int32_t getPing() const;
            bool pingIsSet() const;
            void unsetPing();
            void setPing(int32_t value);

            utility::string_t getMap() const;
            bool mapIsSet() const;
            void unsetmap();
            void setMap(const utility::string_t &value);

            int32_t getUsedSlots() const;
            bool usedSlotsIsSet() const;
            void unsetUsed_slots();
            void setUsedSlots(int32_t value);

            int32_t getMaxSlots() const;
            bool maxSlotsIsSet() const;
            void unsetMax_slots();
            void setMaxSlots(int32_t value);

            utility::string_t getMotd() const;
            bool motdIsSet() const;
            void unsetMotd();
            void setMotd(const utility::string_t &value);

            utility::string_t getPlayers() const;
            bool playersIsSet() const;
            void unsetPlayers();
            void setPlayers(const utility::string_t &value);

            utility::datetime getLastOnline() const;
            bool lastOnlineIsSet() const;
            void unsetLast_online();
            void setLastOnline(const utility::datetime &value);

            utility::string_t getCountry() const;
            bool countryIsSet() const;
            void unsetCountry();
            void setCountry(const utility::string_t &value);

            bool isSteam() const;
            bool steamIsSet() const;
            void unsetSteam();
            void setSteam(bool value);

            utility::string_t getDiscordServerId() const;
            bool discordServerIdIsSet() const;
            void unsetDiscord_server_id();
            void setDiscordServerId(const utility::string_t &value);

            utility::string_t getYoutubeVideoUrl() const;
            bool youtubeVideoUrlIsSet() const;
            void unsetYoutube_video_url();
            void setYoutubeVideoUrl(const utility::string_t &value);

            utility::string_t getTags() const;
            bool tagsIsSet() const;
            void unsetTags();
            void setTags(const utility::string_t &value);

            int32_t getCommentCount() const;
            bool commentCountIsSet() const;
            void unsetComment_count();
            void setCommentCount(int32_t value);

            utility::datetime getCreated() const;
            bool createdIsSet() const;
            void unsetCreated();
            void setCreated(const utility::datetime &value);

            utility::datetime getUpdated() const;
            bool updatedIsSet() const;
            void unsetUpdated();
            void setUpdated(const utility::datetime &value);

        protected:
            utility::string_t m_Id;
            bool m_IdIsSet;

            utility::string_t m_Name;
            bool m_NameIsSet;

            utility::string_t m_Description;
            bool m_DescriptionIsSet;

            utility::string_t m_Address;
            bool m_AddressIsSet;

            int32_t m_Game_port;
            bool m_Game_portIsSet;

            int32_t m_Query_port;
            bool m_Query_portIsSet;

            utility::string_t m_Game_id;
            bool m_Game_idIsSet;

            utility::string_t m_Game_icon_url;
            bool m_Game_icon_urlIsSet;

            utility::string_t m_Version;
            bool m_VersionIsSet;

            bool m_Featured;
            bool m_FeaturedIsSet;

            utility::string_t m_Cluster_id;
            bool m_Cluster_idIsSet;

            utility::string_t m_Website_url;
            bool m_Website_urlIsSet;

            utility::string_t m_Banner_url;
            bool m_Banner_urlIsSet;

            utility::string_t m_Owner_id;
            bool m_Owner_idIsSet;

            double m_Uptime;
            bool m_UptimeIsSet;

            std::shared_ptr<ServerStatus> m_Status;
            bool m_StatusIsSet;

            int32_t m_Ping;
            bool m_PingIsSet;

            utility::string_t m_map;
            bool m_mapIsSet;

            int32_t m_Used_slots;
            bool m_Used_slotsIsSet;

            int32_t m_Max_slots;
            bool m_Max_slotsIsSet;

            utility::string_t m_Motd;
            bool m_MotdIsSet;

            utility::string_t m_Players;
            bool m_PlayersIsSet;

            utility::datetime m_Last_online;
            bool m_Last_onlineIsSet;

            utility::string_t m_Country;
            bool m_CountryIsSet;

            bool m_Steam;
            bool m_SteamIsSet;

            utility::string_t m_Discord_server_id;
            bool m_Discord_server_idIsSet;

            utility::string_t m_Youtube_video_url;
            bool m_Youtube_video_urlIsSet;

            utility::string_t m_Tags;
            bool m_TagsIsSet;

            int32_t m_Comment_count;
            bool m_Comment_countIsSet;

            utility::datetime m_Created;
            bool m_CreatedIsSet;

            utility::datetime m_Updated;
            bool m_UpdatedIsSet;
        };

    }
}

#endif /* TRIBUFU_MODELS_GameServer_H_ */
